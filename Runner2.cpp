#include "./firrtl-sig/uint.h"
#include <iostream>
#include <assert.h>
#include <stdlib.h>
using namespace std;

int main() {

	UInt<4> u8("0x8");
	UInt<4> u9("0x9");
	UInt<4> u10("0xa");
	UInt<4> u11("0xb");
	UInt<4> u12("0xc");
	UInt<4> u13("0xd");
	UInt<4> u14("0xe");
	UInt<4> u15("0xf");
	assert(u8+u8 == UInt<5>("0x10"));
	assert(u8-u8 == UInt<5>("0x0"));
	assert(u8*u8 == UInt<8>("0x40"));
	assert(0 == (u8<u8));
	assert(1 == (u8<=u8));
	assert(0 == (u8>u8));
	assert(1 == (u8>=u8));
	assert(1 == (u8==u8));
	assert(0 == (u8!=u8));
	assert(u8+u9 == UInt<5>("0x11"));
	assert(u8-u9 == UInt<5>("0x1f"));
	assert(u8*u9 == UInt<8>("0x48"));
	assert(1 == (u8<u9));
	assert(1 == (u8<=u9));
	assert(0 == (u8>u9));
	assert(0 == (u8>=u9));
	assert(0 == (u8==u9));
	assert(1 == (u8!=u9));
	assert(u8+u10 == UInt<5>("0x12"));
	assert(u8-u10 == UInt<5>("0x1e"));
	assert(u8*u10 == UInt<8>("0x50"));
	assert(1 == (u8<u10));
	assert(1 == (u8<=u10));
	assert(0 == (u8>u10));
	assert(0 == (u8>=u10));
	assert(0 == (u8==u10));
	assert(1 == (u8!=u10));
	assert(u8+u11 == UInt<5>("0x13"));
	assert(u8-u11 == UInt<5>("0x1d"));
	assert(u8*u11 == UInt<8>("0x58"));
	assert(1 == (u8<u11));
	assert(1 == (u8<=u11));
	assert(0 == (u8>u11));
	assert(0 == (u8>=u11));
	assert(0 == (u8==u11));
	assert(1 == (u8!=u11));
	assert(u8+u12 == UInt<5>("0x14"));
	assert(u8-u12 == UInt<5>("0x1c"));
	assert(u8*u12 == UInt<8>("0x60"));
	assert(1 == (u8<u12));
	assert(1 == (u8<=u12));
	assert(0 == (u8>u12));
	assert(0 == (u8>=u12));
	assert(0 == (u8==u12));
	assert(1 == (u8!=u12));
	assert(u8+u13 == UInt<5>("0x15"));
	assert(u8-u13 == UInt<5>("0x1b"));
	assert(u8*u13 == UInt<8>("0x68"));
	assert(1 == (u8<u13));
	assert(1 == (u8<=u13));
	assert(0 == (u8>u13));
	assert(0 == (u8>=u13));
	assert(0 == (u8==u13));
	assert(1 == (u8!=u13));
	assert(u8+u14 == UInt<5>("0x16"));
	assert(u8-u14 == UInt<5>("0x1a"));
	assert(u8*u14 == UInt<8>("0x70"));
	assert(1 == (u8<u14));
	assert(1 == (u8<=u14));
	assert(0 == (u8>u14));
	assert(0 == (u8>=u14));
	assert(0 == (u8==u14));
	assert(1 == (u8!=u14));
	assert(u8+u15 == UInt<5>("0x17"));
	assert(u8-u15 == UInt<5>("0x19"));
	assert(u8*u15 == UInt<8>("0x78"));
	assert(1 == (u8<u15));
	assert(1 == (u8<=u15));
	assert(0 == (u8>u15));
	assert(0 == (u8>=u15));
	assert(0 == (u8==u15));
	assert(1 == (u8!=u15));
	assert(u9+u8 == UInt<5>("0x11"));
	assert(u9-u8 == UInt<5>("0x1"));
	assert(u9*u8 == UInt<8>("0x48"));
	assert(0 == (u9<u8));
	assert(0 == (u9<=u8));
	assert(1 == (u9>u8));
	assert(1 == (u9>=u8));
	assert(0 == (u9==u8));
	assert(1 == (u9!=u8));
	assert(u9+u9 == UInt<5>("0x12"));
	assert(u9-u9 == UInt<5>("0x0"));
	assert(u9*u9 == UInt<8>("0x51"));
	assert(0 == (u9<u9));
	assert(1 == (u9<=u9));
	assert(0 == (u9>u9));
	assert(1 == (u9>=u9));
	assert(1 == (u9==u9));
	assert(0 == (u9!=u9));
	assert(u9+u10 == UInt<5>("0x13"));
	assert(u9-u10 == UInt<5>("0x1f"));
	assert(u9*u10 == UInt<8>("0x5a"));
	assert(1 == (u9<u10));
	assert(1 == (u9<=u10));
	assert(0 == (u9>u10));
	assert(0 == (u9>=u10));
	assert(0 == (u9==u10));
	assert(1 == (u9!=u10));
	assert(u9+u11 == UInt<5>("0x14"));
	assert(u9-u11 == UInt<5>("0x1e"));
	assert(u9*u11 == UInt<8>("0x63"));
	assert(1 == (u9<u11));
	assert(1 == (u9<=u11));
	assert(0 == (u9>u11));
	assert(0 == (u9>=u11));
	assert(0 == (u9==u11));
	assert(1 == (u9!=u11));
	assert(u9+u12 == UInt<5>("0x15"));
	assert(u9-u12 == UInt<5>("0x1d"));
	assert(u9*u12 == UInt<8>("0x6c"));
	assert(1 == (u9<u12));
	assert(1 == (u9<=u12));
	assert(0 == (u9>u12));
	assert(0 == (u9>=u12));
	assert(0 == (u9==u12));
	assert(1 == (u9!=u12));
	assert(u9+u13 == UInt<5>("0x16"));
	assert(u9-u13 == UInt<5>("0x1c"));
	assert(u9*u13 == UInt<8>("0x75"));
	assert(1 == (u9<u13));
	assert(1 == (u9<=u13));
	assert(0 == (u9>u13));
	assert(0 == (u9>=u13));
	assert(0 == (u9==u13));
	assert(1 == (u9!=u13));
	assert(u9+u14 == UInt<5>("0x17"));
	assert(u9-u14 == UInt<5>("0x1b"));
	assert(u9*u14 == UInt<8>("0x7e"));
	assert(1 == (u9<u14));
	assert(1 == (u9<=u14));
	assert(0 == (u9>u14));
	assert(0 == (u9>=u14));
	assert(0 == (u9==u14));
	assert(1 == (u9!=u14));
	assert(u9+u15 == UInt<5>("0x18"));
	assert(u9-u15 == UInt<5>("0x1a"));
	assert(u9*u15 == UInt<8>("0x87"));
	assert(1 == (u9<u15));
	assert(1 == (u9<=u15));
	assert(0 == (u9>u15));
	assert(0 == (u9>=u15));
	assert(0 == (u9==u15));
	assert(1 == (u9!=u15));
	assert(u10+u8 == UInt<5>("0x12"));
	assert(u10-u8 == UInt<5>("0x2"));
	assert(u10*u8 == UInt<8>("0x50"));
	assert(0 == (u10<u8));
	assert(0 == (u10<=u8));
	assert(1 == (u10>u8));
	assert(1 == (u10>=u8));
	assert(0 == (u10==u8));
	assert(1 == (u10!=u8));
	assert(u10+u9 == UInt<5>("0x13"));
	assert(u10-u9 == UInt<5>("0x1"));
	assert(u10*u9 == UInt<8>("0x5a"));
	assert(0 == (u10<u9));
	assert(0 == (u10<=u9));
	assert(1 == (u10>u9));
	assert(1 == (u10>=u9));
	assert(0 == (u10==u9));
	assert(1 == (u10!=u9));
	assert(u10+u10 == UInt<5>("0x14"));
	assert(u10-u10 == UInt<5>("0x0"));
	assert(u10*u10 == UInt<8>("0x64"));
	assert(0 == (u10<u10));
	assert(1 == (u10<=u10));
	assert(0 == (u10>u10));
	assert(1 == (u10>=u10));
	assert(1 == (u10==u10));
	assert(0 == (u10!=u10));
	assert(u10+u11 == UInt<5>("0x15"));
	assert(u10-u11 == UInt<5>("0x1f"));
	assert(u10*u11 == UInt<8>("0x6e"));
	assert(1 == (u10<u11));
	assert(1 == (u10<=u11));
	assert(0 == (u10>u11));
	assert(0 == (u10>=u11));
	assert(0 == (u10==u11));
	assert(1 == (u10!=u11));
	assert(u10+u12 == UInt<5>("0x16"));
	assert(u10-u12 == UInt<5>("0x1e"));
	assert(u10*u12 == UInt<8>("0x78"));
	assert(1 == (u10<u12));
	assert(1 == (u10<=u12));
	assert(0 == (u10>u12));
	assert(0 == (u10>=u12));
	assert(0 == (u10==u12));
	assert(1 == (u10!=u12));
	assert(u10+u13 == UInt<5>("0x17"));
	assert(u10-u13 == UInt<5>("0x1d"));
	assert(u10*u13 == UInt<8>("0x82"));
	assert(1 == (u10<u13));
	assert(1 == (u10<=u13));
	assert(0 == (u10>u13));
	assert(0 == (u10>=u13));
	assert(0 == (u10==u13));
	assert(1 == (u10!=u13));
	assert(u10+u14 == UInt<5>("0x18"));
	assert(u10-u14 == UInt<5>("0x1c"));
	assert(u10*u14 == UInt<8>("0x8c"));
	assert(1 == (u10<u14));
	assert(1 == (u10<=u14));
	assert(0 == (u10>u14));
	assert(0 == (u10>=u14));
	assert(0 == (u10==u14));
	assert(1 == (u10!=u14));
	assert(u10+u15 == UInt<5>("0x19"));
	assert(u10-u15 == UInt<5>("0x1b"));
	assert(u10*u15 == UInt<8>("0x96"));
	assert(1 == (u10<u15));
	assert(1 == (u10<=u15));
	assert(0 == (u10>u15));
	assert(0 == (u10>=u15));
	assert(0 == (u10==u15));
	assert(1 == (u10!=u15));
	assert(u11+u8 == UInt<5>("0x13"));
	assert(u11-u8 == UInt<5>("0x3"));
	assert(u11*u8 == UInt<8>("0x58"));
	assert(0 == (u11<u8));
	assert(0 == (u11<=u8));
	assert(1 == (u11>u8));
	assert(1 == (u11>=u8));
	assert(0 == (u11==u8));
	assert(1 == (u11!=u8));
	assert(u11+u9 == UInt<5>("0x14"));
	assert(u11-u9 == UInt<5>("0x2"));
	assert(u11*u9 == UInt<8>("0x63"));
	assert(0 == (u11<u9));
	assert(0 == (u11<=u9));
	assert(1 == (u11>u9));
	assert(1 == (u11>=u9));
	assert(0 == (u11==u9));
	assert(1 == (u11!=u9));
	assert(u11+u10 == UInt<5>("0x15"));
	assert(u11-u10 == UInt<5>("0x1"));
	assert(u11*u10 == UInt<8>("0x6e"));
	assert(0 == (u11<u10));
	assert(0 == (u11<=u10));
	assert(1 == (u11>u10));
	assert(1 == (u11>=u10));
	assert(0 == (u11==u10));
	assert(1 == (u11!=u10));
	assert(u11+u11 == UInt<5>("0x16"));
	assert(u11-u11 == UInt<5>("0x0"));
	assert(u11*u11 == UInt<8>("0x79"));
	assert(0 == (u11<u11));
	assert(1 == (u11<=u11));
	assert(0 == (u11>u11));
	assert(1 == (u11>=u11));
	assert(1 == (u11==u11));
	assert(0 == (u11!=u11));
	assert(u11+u12 == UInt<5>("0x17"));
	assert(u11-u12 == UInt<5>("0x1f"));
	assert(u11*u12 == UInt<8>("0x84"));
	assert(1 == (u11<u12));
	assert(1 == (u11<=u12));
	assert(0 == (u11>u12));
	assert(0 == (u11>=u12));
	assert(0 == (u11==u12));
	assert(1 == (u11!=u12));
	assert(u11+u13 == UInt<5>("0x18"));
	assert(u11-u13 == UInt<5>("0x1e"));
	assert(u11*u13 == UInt<8>("0x8f"));
	assert(1 == (u11<u13));
	assert(1 == (u11<=u13));
	assert(0 == (u11>u13));
	assert(0 == (u11>=u13));
	assert(0 == (u11==u13));
	assert(1 == (u11!=u13));
	assert(u11+u14 == UInt<5>("0x19"));
	assert(u11-u14 == UInt<5>("0x1d"));
	assert(u11*u14 == UInt<8>("0x9a"));
	assert(1 == (u11<u14));
	assert(1 == (u11<=u14));
	assert(0 == (u11>u14));
	assert(0 == (u11>=u14));
	assert(0 == (u11==u14));
	assert(1 == (u11!=u14));
	assert(u11+u15 == UInt<5>("0x1a"));
	assert(u11-u15 == UInt<5>("0x1c"));
	assert(u11*u15 == UInt<8>("0xa5"));
	assert(1 == (u11<u15));
	assert(1 == (u11<=u15));
	assert(0 == (u11>u15));
	assert(0 == (u11>=u15));
	assert(0 == (u11==u15));
	assert(1 == (u11!=u15));
	assert(u12+u8 == UInt<5>("0x14"));
	assert(u12-u8 == UInt<5>("0x4"));
	assert(u12*u8 == UInt<8>("0x60"));
	assert(0 == (u12<u8));
	assert(0 == (u12<=u8));
	assert(1 == (u12>u8));
	assert(1 == (u12>=u8));
	assert(0 == (u12==u8));
	assert(1 == (u12!=u8));
	assert(u12+u9 == UInt<5>("0x15"));
	assert(u12-u9 == UInt<5>("0x3"));
	assert(u12*u9 == UInt<8>("0x6c"));
	assert(0 == (u12<u9));
	assert(0 == (u12<=u9));
	assert(1 == (u12>u9));
	assert(1 == (u12>=u9));
	assert(0 == (u12==u9));
	assert(1 == (u12!=u9));
	assert(u12+u10 == UInt<5>("0x16"));
	assert(u12-u10 == UInt<5>("0x2"));
	assert(u12*u10 == UInt<8>("0x78"));
	assert(0 == (u12<u10));
	assert(0 == (u12<=u10));
	assert(1 == (u12>u10));
	assert(1 == (u12>=u10));
	assert(0 == (u12==u10));
	assert(1 == (u12!=u10));
	assert(u12+u11 == UInt<5>("0x17"));
	assert(u12-u11 == UInt<5>("0x1"));
	assert(u12*u11 == UInt<8>("0x84"));
	assert(0 == (u12<u11));
	assert(0 == (u12<=u11));
	assert(1 == (u12>u11));
	assert(1 == (u12>=u11));
	assert(0 == (u12==u11));
	assert(1 == (u12!=u11));
	assert(u12+u12 == UInt<5>("0x18"));
	assert(u12-u12 == UInt<5>("0x0"));
	assert(u12*u12 == UInt<8>("0x90"));
	assert(0 == (u12<u12));
	assert(1 == (u12<=u12));
	assert(0 == (u12>u12));
	assert(1 == (u12>=u12));
	assert(1 == (u12==u12));
	assert(0 == (u12!=u12));
	assert(u12+u13 == UInt<5>("0x19"));
	assert(u12-u13 == UInt<5>("0x1f"));
	assert(u12*u13 == UInt<8>("0x9c"));
	assert(1 == (u12<u13));
	assert(1 == (u12<=u13));
	assert(0 == (u12>u13));
	assert(0 == (u12>=u13));
	assert(0 == (u12==u13));
	assert(1 == (u12!=u13));
	assert(u12+u14 == UInt<5>("0x1a"));
	assert(u12-u14 == UInt<5>("0x1e"));
	assert(u12*u14 == UInt<8>("0xa8"));
	assert(1 == (u12<u14));
	assert(1 == (u12<=u14));
	assert(0 == (u12>u14));
	assert(0 == (u12>=u14));
	assert(0 == (u12==u14));
	assert(1 == (u12!=u14));
	assert(u12+u15 == UInt<5>("0x1b"));
	assert(u12-u15 == UInt<5>("0x1d"));
	assert(u12*u15 == UInt<8>("0xb4"));
	assert(1 == (u12<u15));
	assert(1 == (u12<=u15));
	assert(0 == (u12>u15));
	assert(0 == (u12>=u15));
	assert(0 == (u12==u15));
	assert(1 == (u12!=u15));
	assert(u13+u8 == UInt<5>("0x15"));
	assert(u13-u8 == UInt<5>("0x5"));
	assert(u13*u8 == UInt<8>("0x68"));
	assert(0 == (u13<u8));
	assert(0 == (u13<=u8));
	assert(1 == (u13>u8));
	assert(1 == (u13>=u8));
	assert(0 == (u13==u8));
	assert(1 == (u13!=u8));
	assert(u13+u9 == UInt<5>("0x16"));
	assert(u13-u9 == UInt<5>("0x4"));
	assert(u13*u9 == UInt<8>("0x75"));
	assert(0 == (u13<u9));
	assert(0 == (u13<=u9));
	assert(1 == (u13>u9));
	assert(1 == (u13>=u9));
	assert(0 == (u13==u9));
	assert(1 == (u13!=u9));
	assert(u13+u10 == UInt<5>("0x17"));
	assert(u13-u10 == UInt<5>("0x3"));
	assert(u13*u10 == UInt<8>("0x82"));
	assert(0 == (u13<u10));
	assert(0 == (u13<=u10));
	assert(1 == (u13>u10));
	assert(1 == (u13>=u10));
	assert(0 == (u13==u10));
	assert(1 == (u13!=u10));
	assert(u13+u11 == UInt<5>("0x18"));
	assert(u13-u11 == UInt<5>("0x2"));
	assert(u13*u11 == UInt<8>("0x8f"));
	assert(0 == (u13<u11));
	assert(0 == (u13<=u11));
	assert(1 == (u13>u11));
	assert(1 == (u13>=u11));
	assert(0 == (u13==u11));
	assert(1 == (u13!=u11));
	assert(u13+u12 == UInt<5>("0x19"));
	assert(u13-u12 == UInt<5>("0x1"));
	assert(u13*u12 == UInt<8>("0x9c"));
	assert(0 == (u13<u12));
	assert(0 == (u13<=u12));
	assert(1 == (u13>u12));
	assert(1 == (u13>=u12));
	assert(0 == (u13==u12));
	assert(1 == (u13!=u12));
	assert(u13+u13 == UInt<5>("0x1a"));
	assert(u13-u13 == UInt<5>("0x0"));
	assert(u13*u13 == UInt<8>("0xa9"));
	assert(0 == (u13<u13));
	assert(1 == (u13<=u13));
	assert(0 == (u13>u13));
	assert(1 == (u13>=u13));
	assert(1 == (u13==u13));
	assert(0 == (u13!=u13));
	assert(u13+u14 == UInt<5>("0x1b"));
	assert(u13-u14 == UInt<5>("0x1f"));
	assert(u13*u14 == UInt<8>("0xb6"));
	assert(1 == (u13<u14));
	assert(1 == (u13<=u14));
	assert(0 == (u13>u14));
	assert(0 == (u13>=u14));
	assert(0 == (u13==u14));
	assert(1 == (u13!=u14));
	assert(u13+u15 == UInt<5>("0x1c"));
	assert(u13-u15 == UInt<5>("0x1e"));
	assert(u13*u15 == UInt<8>("0xc3"));
	assert(1 == (u13<u15));
	assert(1 == (u13<=u15));
	assert(0 == (u13>u15));
	assert(0 == (u13>=u15));
	assert(0 == (u13==u15));
	assert(1 == (u13!=u15));
	assert(u14+u8 == UInt<5>("0x16"));
	assert(u14-u8 == UInt<5>("0x6"));
	assert(u14*u8 == UInt<8>("0x70"));
	assert(0 == (u14<u8));
	assert(0 == (u14<=u8));
	assert(1 == (u14>u8));
	assert(1 == (u14>=u8));
	assert(0 == (u14==u8));
	assert(1 == (u14!=u8));
	assert(u14+u9 == UInt<5>("0x17"));
	assert(u14-u9 == UInt<5>("0x5"));
	assert(u14*u9 == UInt<8>("0x7e"));
	assert(0 == (u14<u9));
	assert(0 == (u14<=u9));
	assert(1 == (u14>u9));
	assert(1 == (u14>=u9));
	assert(0 == (u14==u9));
	assert(1 == (u14!=u9));
	assert(u14+u10 == UInt<5>("0x18"));
	assert(u14-u10 == UInt<5>("0x4"));
	assert(u14*u10 == UInt<8>("0x8c"));
	assert(0 == (u14<u10));
	assert(0 == (u14<=u10));
	assert(1 == (u14>u10));
	assert(1 == (u14>=u10));
	assert(0 == (u14==u10));
	assert(1 == (u14!=u10));
	assert(u14+u11 == UInt<5>("0x19"));
	assert(u14-u11 == UInt<5>("0x3"));
	assert(u14*u11 == UInt<8>("0x9a"));
	assert(0 == (u14<u11));
	assert(0 == (u14<=u11));
	assert(1 == (u14>u11));
	assert(1 == (u14>=u11));
	assert(0 == (u14==u11));
	assert(1 == (u14!=u11));
	assert(u14+u12 == UInt<5>("0x1a"));
	assert(u14-u12 == UInt<5>("0x2"));
	assert(u14*u12 == UInt<8>("0xa8"));
	assert(0 == (u14<u12));
	assert(0 == (u14<=u12));
	assert(1 == (u14>u12));
	assert(1 == (u14>=u12));
	assert(0 == (u14==u12));
	assert(1 == (u14!=u12));
	assert(u14+u13 == UInt<5>("0x1b"));
	assert(u14-u13 == UInt<5>("0x1"));
	assert(u14*u13 == UInt<8>("0xb6"));
	assert(0 == (u14<u13));
	assert(0 == (u14<=u13));
	assert(1 == (u14>u13));
	assert(1 == (u14>=u13));
	assert(0 == (u14==u13));
	assert(1 == (u14!=u13));
	assert(u14+u14 == UInt<5>("0x1c"));
	assert(u14-u14 == UInt<5>("0x0"));
	assert(u14*u14 == UInt<8>("0xc4"));
	assert(0 == (u14<u14));
	assert(1 == (u14<=u14));
	assert(0 == (u14>u14));
	assert(1 == (u14>=u14));
	assert(1 == (u14==u14));
	assert(0 == (u14!=u14));
	assert(u14+u15 == UInt<5>("0x1d"));
	assert(u14-u15 == UInt<5>("0x1f"));
	assert(u14*u15 == UInt<8>("0xd2"));
	assert(1 == (u14<u15));
	assert(1 == (u14<=u15));
	assert(0 == (u14>u15));
	assert(0 == (u14>=u15));
	assert(0 == (u14==u15));
	assert(1 == (u14!=u15));
	assert(u15+u8 == UInt<5>("0x17"));
	assert(u15-u8 == UInt<5>("0x7"));
	assert(u15*u8 == UInt<8>("0x78"));
	assert(0 == (u15<u8));
	assert(0 == (u15<=u8));
	assert(1 == (u15>u8));
	assert(1 == (u15>=u8));
	assert(0 == (u15==u8));
	assert(1 == (u15!=u8));
	assert(u15+u9 == UInt<5>("0x18"));
	assert(u15-u9 == UInt<5>("0x6"));
	assert(u15*u9 == UInt<8>("0x87"));
	assert(0 == (u15<u9));
	assert(0 == (u15<=u9));
	assert(1 == (u15>u9));
	assert(1 == (u15>=u9));
	assert(0 == (u15==u9));
	assert(1 == (u15!=u9));
	assert(u15+u10 == UInt<5>("0x19"));
	assert(u15-u10 == UInt<5>("0x5"));
	assert(u15*u10 == UInt<8>("0x96"));
	assert(0 == (u15<u10));
	assert(0 == (u15<=u10));
	assert(1 == (u15>u10));
	assert(1 == (u15>=u10));
	assert(0 == (u15==u10));
	assert(1 == (u15!=u10));
	assert(u15+u11 == UInt<5>("0x1a"));
	assert(u15-u11 == UInt<5>("0x4"));
	assert(u15*u11 == UInt<8>("0xa5"));
	assert(0 == (u15<u11));
	assert(0 == (u15<=u11));
	assert(1 == (u15>u11));
	assert(1 == (u15>=u11));
	assert(0 == (u15==u11));
	assert(1 == (u15!=u11));
	assert(u15+u12 == UInt<5>("0x1b"));
	assert(u15-u12 == UInt<5>("0x3"));
	assert(u15*u12 == UInt<8>("0xb4"));
	assert(0 == (u15<u12));
	assert(0 == (u15<=u12));
	assert(1 == (u15>u12));
	assert(1 == (u15>=u12));
	assert(0 == (u15==u12));
	assert(1 == (u15!=u12));
	assert(u15+u13 == UInt<5>("0x1c"));
	assert(u15-u13 == UInt<5>("0x2"));
	assert(u15*u13 == UInt<8>("0xc3"));
	assert(0 == (u15<u13));
	assert(0 == (u15<=u13));
	assert(1 == (u15>u13));
	assert(1 == (u15>=u13));
	assert(0 == (u15==u13));
	assert(1 == (u15!=u13));
	assert(u15+u14 == UInt<5>("0x1d"));
	assert(u15-u14 == UInt<5>("0x1"));
	assert(u15*u14 == UInt<8>("0xd2"));
	assert(0 == (u15<u14));
	assert(0 == (u15<=u14));
	assert(1 == (u15>u14));
	assert(1 == (u15>=u14));
	assert(0 == (u15==u14));
	assert(1 == (u15!=u14));
	assert(u15+u15 == UInt<5>("0x1e"));
	assert(u15-u15 == UInt<5>("0x0"));
	assert(u15*u15 == UInt<8>("0xe1"));
	assert(0 == (u15<u15));
	assert(1 == (u15<=u15));
	assert(0 == (u15>u15));
	assert(1 == (u15>=u15));
	assert(1 == (u15==u15));
	assert(0 == (u15!=u15));

	return 0;
}