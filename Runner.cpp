#include "./firrtl-sig/uint.h"
#include <iostream>
#include <assert.h>
#include <stdlib.h>
using namespace std;

int main() {

	UInt<4> u8("0x8");
	UInt<4> u9("0x9");
	UInt<4> u10("0xa");
	UInt<4> u11("0xb");
	UInt<4> u12("0xc");
	UInt<4> u13("0xd");
	UInt<4> u14("0xe");
	UInt<4> u15("0xf");
	assert(u8+u8 == UInt<5>("0x10"));
	assert(u8-u8 == UInt<5>("0x0"));
	assert(u8*u8 == UInt<8>("0x40"));
	assert(0 == (u8<u8));
	assert(1 == (u8<=u8));
	assert(0 == (u8>u8));
	assert(1 == (u8>=u8));
	assert(1 == (u8==u8));
	assert(0 == (u8!=u8));
	assert(u8.pad<3>() == UInt<4>("0x8"));
	assert(u8.shl<3>() == UInt<7>("0x40"));
	assert(u8.shr<3>() == UInt<1>("0x1"));
	assert((u8&u8) == UInt<4>("0x8"));
	assert((u8|u8) == UInt<4>("0x8"));
	assert((u8^u8) == UInt<4>("0x0"));
	assert((u8.andr()) == UInt<1>("0x0"));
	assert((u8.orr()) == UInt<1>("0x1"));
	assert((u8.xorr()) == UInt<1>("0x1"));
	assert(u8.cat(u8) == UInt<8>("0x88"));
	assert(u8/u8 == UInt<4>("0x1"));
	assert(u8%u8 == UInt<4>("0x0"));
	assert(u8+u9 == UInt<5>("0x11"));
	assert(u8-u9 == UInt<5>("0x1f"));
	assert(u8*u9 == UInt<8>("0x48"));
	assert(1 == (u8<u9));
	assert(1 == (u8<=u9));
	assert(0 == (u8>u9));
	assert(0 == (u8>=u9));
	assert(0 == (u8==u9));
	assert(1 == (u8!=u9));
	assert(u8.pad<3>() == UInt<4>("0x8"));
	assert(u8.shl<3>() == UInt<7>("0x40"));
	assert(u8.shr<3>() == UInt<1>("0x1"));
	assert((u8&u9) == UInt<4>("0x8"));
	assert((u8|u9) == UInt<4>("0x9"));
	assert((u8^u9) == UInt<4>("0x1"));
	assert((u8.andr()) == UInt<1>("0x0"));
	assert((u8.orr()) == UInt<1>("0x1"));
	assert((u8.xorr()) == UInt<1>("0x1"));
	assert(u8.cat(u9) == UInt<8>("0x89"));
	assert(u8/u9 == UInt<4>("0x0"));
	assert(u8%u9 == UInt<4>("0x8"));
	assert(u8+u10 == UInt<5>("0x12"));
	assert(u8-u10 == UInt<5>("0x1e"));
	assert(u8*u10 == UInt<8>("0x50"));
	assert(1 == (u8<u10));
	assert(1 == (u8<=u10));
	assert(0 == (u8>u10));
	assert(0 == (u8>=u10));
	assert(0 == (u8==u10));
	assert(1 == (u8!=u10));
	assert(u8.pad<3>() == UInt<4>("0x8"));
	assert(u8.shl<3>() == UInt<7>("0x40"));
	assert(u8.shr<3>() == UInt<1>("0x1"));
	assert((u8&u10) == UInt<4>("0x8"));
	assert((u8|u10) == UInt<4>("0xa"));
	assert((u8^u10) == UInt<4>("0x2"));
	assert((u8.andr()) == UInt<1>("0x0"));
	assert((u8.orr()) == UInt<1>("0x1"));
	assert((u8.xorr()) == UInt<1>("0x1"));
	assert(u8.cat(u10) == UInt<8>("0x8a"));
	assert(u8/u10 == UInt<4>("0x0"));
	assert(u8%u10 == UInt<4>("0x8"));
	assert(u8+u11 == UInt<5>("0x13"));
	assert(u8-u11 == UInt<5>("0x1d"));
	assert(u8*u11 == UInt<8>("0x58"));
	assert(1 == (u8<u11));
	assert(1 == (u8<=u11));
	assert(0 == (u8>u11));
	assert(0 == (u8>=u11));
	assert(0 == (u8==u11));
	assert(1 == (u8!=u11));
	assert(u8.pad<3>() == UInt<4>("0x8"));
	assert(u8.shl<3>() == UInt<7>("0x40"));
	assert(u8.shr<3>() == UInt<1>("0x1"));
	assert((u8&u11) == UInt<4>("0x8"));
	assert((u8|u11) == UInt<4>("0xb"));
	assert((u8^u11) == UInt<4>("0x3"));
	assert((u8.andr()) == UInt<1>("0x0"));
	assert((u8.orr()) == UInt<1>("0x1"));
	assert((u8.xorr()) == UInt<1>("0x1"));
	assert(u8.cat(u11) == UInt<8>("0x8b"));
	assert(u8/u11 == UInt<4>("0x0"));
	assert(u8%u11 == UInt<4>("0x8"));
	assert(u8+u12 == UInt<5>("0x14"));
	assert(u8-u12 == UInt<5>("0x1c"));
	assert(u8*u12 == UInt<8>("0x60"));
	assert(1 == (u8<u12));
	assert(1 == (u8<=u12));
	assert(0 == (u8>u12));
	assert(0 == (u8>=u12));
	assert(0 == (u8==u12));
	assert(1 == (u8!=u12));
	assert(u8.pad<3>() == UInt<4>("0x8"));
	assert(u8.shl<3>() == UInt<7>("0x40"));
	assert(u8.shr<3>() == UInt<1>("0x1"));
	assert((u8&u12) == UInt<4>("0x8"));
	assert((u8|u12) == UInt<4>("0xc"));
	assert((u8^u12) == UInt<4>("0x4"));
	assert((u8.andr()) == UInt<1>("0x0"));
	assert((u8.orr()) == UInt<1>("0x1"));
	assert((u8.xorr()) == UInt<1>("0x1"));
	assert(u8.cat(u12) == UInt<8>("0x8c"));
	assert(u8/u12 == UInt<4>("0x0"));
	assert(u8%u12 == UInt<4>("0x8"));
	assert(u8+u13 == UInt<5>("0x15"));
	assert(u8-u13 == UInt<5>("0x1b"));
	assert(u8*u13 == UInt<8>("0x68"));
	assert(1 == (u8<u13));
	assert(1 == (u8<=u13));
	assert(0 == (u8>u13));
	assert(0 == (u8>=u13));
	assert(0 == (u8==u13));
	assert(1 == (u8!=u13));
	assert(u8.pad<3>() == UInt<4>("0x8"));
	assert(u8.shl<3>() == UInt<7>("0x40"));
	assert(u8.shr<3>() == UInt<1>("0x1"));
	assert((u8&u13) == UInt<4>("0x8"));
	assert((u8|u13) == UInt<4>("0xd"));
	assert((u8^u13) == UInt<4>("0x5"));
	assert((u8.andr()) == UInt<1>("0x0"));
	assert((u8.orr()) == UInt<1>("0x1"));
	assert((u8.xorr()) == UInt<1>("0x1"));
	assert(u8.cat(u13) == UInt<8>("0x8d"));
	assert(u8/u13 == UInt<4>("0x0"));
	assert(u8%u13 == UInt<4>("0x8"));
	assert(u8+u14 == UInt<5>("0x16"));
	assert(u8-u14 == UInt<5>("0x1a"));
	assert(u8*u14 == UInt<8>("0x70"));
	assert(1 == (u8<u14));
	assert(1 == (u8<=u14));
	assert(0 == (u8>u14));
	assert(0 == (u8>=u14));
	assert(0 == (u8==u14));
	assert(1 == (u8!=u14));
	assert(u8.pad<3>() == UInt<4>("0x8"));
	assert(u8.shl<3>() == UInt<7>("0x40"));
	assert(u8.shr<3>() == UInt<1>("0x1"));
	assert((u8&u14) == UInt<4>("0x8"));
	assert((u8|u14) == UInt<4>("0xe"));
	assert((u8^u14) == UInt<4>("0x6"));
	assert((u8.andr()) == UInt<1>("0x0"));
	assert((u8.orr()) == UInt<1>("0x1"));
	assert((u8.xorr()) == UInt<1>("0x1"));
	assert(u8.cat(u14) == UInt<8>("0x8e"));
	assert(u8/u14 == UInt<4>("0x0"));
	assert(u8%u14 == UInt<4>("0x8"));
	assert(u8+u15 == UInt<5>("0x17"));
	assert(u8-u15 == UInt<5>("0x19"));
	assert(u8*u15 == UInt<8>("0x78"));
	assert(1 == (u8<u15));
	assert(1 == (u8<=u15));
	assert(0 == (u8>u15));
	assert(0 == (u8>=u15));
	assert(0 == (u8==u15));
	assert(1 == (u8!=u15));
	assert(u8.pad<3>() == UInt<4>("0x8"));
	assert(u8.shl<3>() == UInt<7>("0x40"));
	assert(u8.shr<3>() == UInt<1>("0x1"));
	assert((u8&u15) == UInt<4>("0x8"));
	assert((u8|u15) == UInt<4>("0xf"));
	assert((u8^u15) == UInt<4>("0x7"));
	assert((u8.andr()) == UInt<1>("0x0"));
	assert((u8.orr()) == UInt<1>("0x1"));
	assert((u8.xorr()) == UInt<1>("0x1"));
	assert(u8.cat(u15) == UInt<8>("0x8f"));
	assert(u8/u15 == UInt<4>("0x0"));
	assert(u8%u15 == UInt<4>("0x8"));
	assert(u9+u8 == UInt<5>("0x11"));
	assert(u9-u8 == UInt<5>("0x1"));
	assert(u9*u8 == UInt<8>("0x48"));
	assert(0 == (u9<u8));
	assert(0 == (u9<=u8));
	assert(1 == (u9>u8));
	assert(1 == (u9>=u8));
	assert(0 == (u9==u8));
	assert(1 == (u9!=u8));
	assert(u9.pad<3>() == UInt<4>("0x9"));
	assert(u9.shl<3>() == UInt<7>("0x48"));
	assert(u9.shr<3>() == UInt<1>("0x1"));
	assert((u9&u8) == UInt<4>("0x8"));
	assert((u9|u8) == UInt<4>("0x9"));
	assert((u9^u8) == UInt<4>("0x1"));
	assert((u9.andr()) == UInt<1>("0x0"));
	assert((u9.orr()) == UInt<1>("0x1"));
	assert((u9.xorr()) == UInt<1>("0x0"));
	assert(u9.cat(u8) == UInt<8>("0x98"));
	assert(u9/u8 == UInt<4>("0x1"));
	assert(u9%u8 == UInt<4>("0x1"));
	assert(u9+u9 == UInt<5>("0x12"));
	assert(u9-u9 == UInt<5>("0x0"));
	assert(u9*u9 == UInt<8>("0x51"));
	assert(0 == (u9<u9));
	assert(1 == (u9<=u9));
	assert(0 == (u9>u9));
	assert(1 == (u9>=u9));
	assert(1 == (u9==u9));
	assert(0 == (u9!=u9));
	assert(u9.pad<3>() == UInt<4>("0x9"));
	assert(u9.shl<3>() == UInt<7>("0x48"));
	assert(u9.shr<3>() == UInt<1>("0x1"));
	assert((u9&u9) == UInt<4>("0x9"));
	assert((u9|u9) == UInt<4>("0x9"));
	assert((u9^u9) == UInt<4>("0x0"));
	assert((u9.andr()) == UInt<1>("0x0"));
	assert((u9.orr()) == UInt<1>("0x1"));
	assert((u9.xorr()) == UInt<1>("0x0"));
	assert(u9.cat(u9) == UInt<8>("0x99"));
	assert(u9/u9 == UInt<4>("0x1"));
	assert(u9%u9 == UInt<4>("0x0"));
	assert(u9+u10 == UInt<5>("0x13"));
	assert(u9-u10 == UInt<5>("0x1f"));
	assert(u9*u10 == UInt<8>("0x5a"));
	assert(1 == (u9<u10));
	assert(1 == (u9<=u10));
	assert(0 == (u9>u10));
	assert(0 == (u9>=u10));
	assert(0 == (u9==u10));
	assert(1 == (u9!=u10));
	assert(u9.pad<3>() == UInt<4>("0x9"));
	assert(u9.shl<3>() == UInt<7>("0x48"));
	assert(u9.shr<3>() == UInt<1>("0x1"));
	assert((u9&u10) == UInt<4>("0x8"));
	assert((u9|u10) == UInt<4>("0xb"));
	assert((u9^u10) == UInt<4>("0x3"));
	assert((u9.andr()) == UInt<1>("0x0"));
	assert((u9.orr()) == UInt<1>("0x1"));
	assert((u9.xorr()) == UInt<1>("0x0"));
	assert(u9.cat(u10) == UInt<8>("0x9a"));
	assert(u9/u10 == UInt<4>("0x0"));
	assert(u9%u10 == UInt<4>("0x9"));
	assert(u9+u11 == UInt<5>("0x14"));
	assert(u9-u11 == UInt<5>("0x1e"));
	assert(u9*u11 == UInt<8>("0x63"));
	assert(1 == (u9<u11));
	assert(1 == (u9<=u11));
	assert(0 == (u9>u11));
	assert(0 == (u9>=u11));
	assert(0 == (u9==u11));
	assert(1 == (u9!=u11));
	assert(u9.pad<3>() == UInt<4>("0x9"));
	assert(u9.shl<3>() == UInt<7>("0x48"));
	assert(u9.shr<3>() == UInt<1>("0x1"));
	assert((u9&u11) == UInt<4>("0x9"));
	assert((u9|u11) == UInt<4>("0xb"));
	assert((u9^u11) == UInt<4>("0x2"));
	assert((u9.andr()) == UInt<1>("0x0"));
	assert((u9.orr()) == UInt<1>("0x1"));
	assert((u9.xorr()) == UInt<1>("0x0"));
	assert(u9.cat(u11) == UInt<8>("0x9b"));
	assert(u9/u11 == UInt<4>("0x0"));
	assert(u9%u11 == UInt<4>("0x9"));
	assert(u9+u12 == UInt<5>("0x15"));
	assert(u9-u12 == UInt<5>("0x1d"));
	assert(u9*u12 == UInt<8>("0x6c"));
	assert(1 == (u9<u12));
	assert(1 == (u9<=u12));
	assert(0 == (u9>u12));
	assert(0 == (u9>=u12));
	assert(0 == (u9==u12));
	assert(1 == (u9!=u12));
	assert(u9.pad<3>() == UInt<4>("0x9"));
	assert(u9.shl<3>() == UInt<7>("0x48"));
	assert(u9.shr<3>() == UInt<1>("0x1"));
	assert((u9&u12) == UInt<4>("0x8"));
	assert((u9|u12) == UInt<4>("0xd"));
	assert((u9^u12) == UInt<4>("0x5"));
	assert((u9.andr()) == UInt<1>("0x0"));
	assert((u9.orr()) == UInt<1>("0x1"));
	assert((u9.xorr()) == UInt<1>("0x0"));
	assert(u9.cat(u12) == UInt<8>("0x9c"));
	assert(u9/u12 == UInt<4>("0x0"));
	assert(u9%u12 == UInt<4>("0x9"));
	assert(u9+u13 == UInt<5>("0x16"));
	assert(u9-u13 == UInt<5>("0x1c"));
	assert(u9*u13 == UInt<8>("0x75"));
	assert(1 == (u9<u13));
	assert(1 == (u9<=u13));
	assert(0 == (u9>u13));
	assert(0 == (u9>=u13));
	assert(0 == (u9==u13));
	assert(1 == (u9!=u13));
	assert(u9.pad<3>() == UInt<4>("0x9"));
	assert(u9.shl<3>() == UInt<7>("0x48"));
	assert(u9.shr<3>() == UInt<1>("0x1"));
	assert((u9&u13) == UInt<4>("0x9"));
	assert((u9|u13) == UInt<4>("0xd"));
	assert((u9^u13) == UInt<4>("0x4"));
	assert((u9.andr()) == UInt<1>("0x0"));
	assert((u9.orr()) == UInt<1>("0x1"));
	assert((u9.xorr()) == UInt<1>("0x0"));
	assert(u9.cat(u13) == UInt<8>("0x9d"));
	assert(u9/u13 == UInt<4>("0x0"));
	assert(u9%u13 == UInt<4>("0x9"));
	assert(u9+u14 == UInt<5>("0x17"));
	assert(u9-u14 == UInt<5>("0x1b"));
	assert(u9*u14 == UInt<8>("0x7e"));
	assert(1 == (u9<u14));
	assert(1 == (u9<=u14));
	assert(0 == (u9>u14));
	assert(0 == (u9>=u14));
	assert(0 == (u9==u14));
	assert(1 == (u9!=u14));
	assert(u9.pad<3>() == UInt<4>("0x9"));
	assert(u9.shl<3>() == UInt<7>("0x48"));
	assert(u9.shr<3>() == UInt<1>("0x1"));
	assert((u9&u14) == UInt<4>("0x8"));
	assert((u9|u14) == UInt<4>("0xf"));
	assert((u9^u14) == UInt<4>("0x7"));
	assert((u9.andr()) == UInt<1>("0x0"));
	assert((u9.orr()) == UInt<1>("0x1"));
	assert((u9.xorr()) == UInt<1>("0x0"));
	assert(u9.cat(u14) == UInt<8>("0x9e"));
	assert(u9/u14 == UInt<4>("0x0"));
	assert(u9%u14 == UInt<4>("0x9"));
	assert(u9+u15 == UInt<5>("0x18"));
	assert(u9-u15 == UInt<5>("0x1a"));
	assert(u9*u15 == UInt<8>("0x87"));
	assert(1 == (u9<u15));
	assert(1 == (u9<=u15));
	assert(0 == (u9>u15));
	assert(0 == (u9>=u15));
	assert(0 == (u9==u15));
	assert(1 == (u9!=u15));
	assert(u9.pad<3>() == UInt<4>("0x9"));
	assert(u9.shl<3>() == UInt<7>("0x48"));
	assert(u9.shr<3>() == UInt<1>("0x1"));
	assert((u9&u15) == UInt<4>("0x9"));
	assert((u9|u15) == UInt<4>("0xf"));
	assert((u9^u15) == UInt<4>("0x6"));
	assert((u9.andr()) == UInt<1>("0x0"));
	assert((u9.orr()) == UInt<1>("0x1"));
	assert((u9.xorr()) == UInt<1>("0x0"));
	assert(u9.cat(u15) == UInt<8>("0x9f"));
	assert(u9/u15 == UInt<4>("0x0"));
	assert(u9%u15 == UInt<4>("0x9"));
	assert(u10+u8 == UInt<5>("0x12"));
	assert(u10-u8 == UInt<5>("0x2"));
	assert(u10*u8 == UInt<8>("0x50"));
	assert(0 == (u10<u8));
	assert(0 == (u10<=u8));
	assert(1 == (u10>u8));
	assert(1 == (u10>=u8));
	assert(0 == (u10==u8));
	assert(1 == (u10!=u8));
	assert(u10.pad<3>() == UInt<4>("0xa"));
	assert(u10.shl<3>() == UInt<7>("0x50"));
	assert(u10.shr<3>() == UInt<1>("0x1"));
	assert((u10&u8) == UInt<4>("0x8"));
	assert((u10|u8) == UInt<4>("0xa"));
	assert((u10^u8) == UInt<4>("0x2"));
	assert((u10.andr()) == UInt<1>("0x0"));
	assert((u10.orr()) == UInt<1>("0x1"));
	assert((u10.xorr()) == UInt<1>("0x0"));
	assert(u10.cat(u8) == UInt<8>("0xa8"));
	assert(u10/u8 == UInt<4>("0x1"));
	assert(u10%u8 == UInt<4>("0x2"));
	assert(u10+u9 == UInt<5>("0x13"));
	assert(u10-u9 == UInt<5>("0x1"));
	assert(u10*u9 == UInt<8>("0x5a"));
	assert(0 == (u10<u9));
	assert(0 == (u10<=u9));
	assert(1 == (u10>u9));
	assert(1 == (u10>=u9));
	assert(0 == (u10==u9));
	assert(1 == (u10!=u9));
	assert(u10.pad<3>() == UInt<4>("0xa"));
	assert(u10.shl<3>() == UInt<7>("0x50"));
	assert(u10.shr<3>() == UInt<1>("0x1"));
	assert((u10&u9) == UInt<4>("0x8"));
	assert((u10|u9) == UInt<4>("0xb"));
	assert((u10^u9) == UInt<4>("0x3"));
	assert((u10.andr()) == UInt<1>("0x0"));
	assert((u10.orr()) == UInt<1>("0x1"));
	assert((u10.xorr()) == UInt<1>("0x0"));
	assert(u10.cat(u9) == UInt<8>("0xa9"));
	assert(u10/u9 == UInt<4>("0x1"));
	assert(u10%u9 == UInt<4>("0x1"));
	assert(u10+u10 == UInt<5>("0x14"));
	assert(u10-u10 == UInt<5>("0x0"));
	assert(u10*u10 == UInt<8>("0x64"));
	assert(0 == (u10<u10));
	assert(1 == (u10<=u10));
	assert(0 == (u10>u10));
	assert(1 == (u10>=u10));
	assert(1 == (u10==u10));
	assert(0 == (u10!=u10));
	assert(u10.pad<3>() == UInt<4>("0xa"));
	assert(u10.shl<3>() == UInt<7>("0x50"));
	assert(u10.shr<3>() == UInt<1>("0x1"));
	assert((u10&u10) == UInt<4>("0xa"));
	assert((u10|u10) == UInt<4>("0xa"));
	assert((u10^u10) == UInt<4>("0x0"));
	assert((u10.andr()) == UInt<1>("0x0"));
	assert((u10.orr()) == UInt<1>("0x1"));
	assert((u10.xorr()) == UInt<1>("0x0"));
	assert(u10.cat(u10) == UInt<8>("0xaa"));
	assert(u10/u10 == UInt<4>("0x1"));
	assert(u10%u10 == UInt<4>("0x0"));
	assert(u10+u11 == UInt<5>("0x15"));
	assert(u10-u11 == UInt<5>("0x1f"));
	assert(u10*u11 == UInt<8>("0x6e"));
	assert(1 == (u10<u11));
	assert(1 == (u10<=u11));
	assert(0 == (u10>u11));
	assert(0 == (u10>=u11));
	assert(0 == (u10==u11));
	assert(1 == (u10!=u11));
	assert(u10.pad<3>() == UInt<4>("0xa"));
	assert(u10.shl<3>() == UInt<7>("0x50"));
	assert(u10.shr<3>() == UInt<1>("0x1"));
	assert((u10&u11) == UInt<4>("0xa"));
	assert((u10|u11) == UInt<4>("0xb"));
	assert((u10^u11) == UInt<4>("0x1"));
	assert((u10.andr()) == UInt<1>("0x0"));
	assert((u10.orr()) == UInt<1>("0x1"));
	assert((u10.xorr()) == UInt<1>("0x0"));
	assert(u10.cat(u11) == UInt<8>("0xab"));
	assert(u10/u11 == UInt<4>("0x0"));
	assert(u10%u11 == UInt<4>("0xa"));
	assert(u10+u12 == UInt<5>("0x16"));
	assert(u10-u12 == UInt<5>("0x1e"));
	assert(u10*u12 == UInt<8>("0x78"));
	assert(1 == (u10<u12));
	assert(1 == (u10<=u12));
	assert(0 == (u10>u12));
	assert(0 == (u10>=u12));
	assert(0 == (u10==u12));
	assert(1 == (u10!=u12));
	assert(u10.pad<3>() == UInt<4>("0xa"));
	assert(u10.shl<3>() == UInt<7>("0x50"));
	assert(u10.shr<3>() == UInt<1>("0x1"));
	assert((u10&u12) == UInt<4>("0x8"));
	assert((u10|u12) == UInt<4>("0xe"));
	assert((u10^u12) == UInt<4>("0x6"));
	assert((u10.andr()) == UInt<1>("0x0"));
	assert((u10.orr()) == UInt<1>("0x1"));
	assert((u10.xorr()) == UInt<1>("0x0"));
	assert(u10.cat(u12) == UInt<8>("0xac"));
	assert(u10/u12 == UInt<4>("0x0"));
	assert(u10%u12 == UInt<4>("0xa"));
	assert(u10+u13 == UInt<5>("0x17"));
	assert(u10-u13 == UInt<5>("0x1d"));
	assert(u10*u13 == UInt<8>("0x82"));
	assert(1 == (u10<u13));
	assert(1 == (u10<=u13));
	assert(0 == (u10>u13));
	assert(0 == (u10>=u13));
	assert(0 == (u10==u13));
	assert(1 == (u10!=u13));
	assert(u10.pad<3>() == UInt<4>("0xa"));
	assert(u10.shl<3>() == UInt<7>("0x50"));
	assert(u10.shr<3>() == UInt<1>("0x1"));
	assert((u10&u13) == UInt<4>("0x8"));
	assert((u10|u13) == UInt<4>("0xf"));
	assert((u10^u13) == UInt<4>("0x7"));
	assert((u10.andr()) == UInt<1>("0x0"));
	assert((u10.orr()) == UInt<1>("0x1"));
	assert((u10.xorr()) == UInt<1>("0x0"));
	assert(u10.cat(u13) == UInt<8>("0xad"));
	assert(u10/u13 == UInt<4>("0x0"));
	assert(u10%u13 == UInt<4>("0xa"));
	assert(u10+u14 == UInt<5>("0x18"));
	assert(u10-u14 == UInt<5>("0x1c"));
	assert(u10*u14 == UInt<8>("0x8c"));
	assert(1 == (u10<u14));
	assert(1 == (u10<=u14));
	assert(0 == (u10>u14));
	assert(0 == (u10>=u14));
	assert(0 == (u10==u14));
	assert(1 == (u10!=u14));
	assert(u10.pad<3>() == UInt<4>("0xa"));
	assert(u10.shl<3>() == UInt<7>("0x50"));
	assert(u10.shr<3>() == UInt<1>("0x1"));
	assert((u10&u14) == UInt<4>("0xa"));
	assert((u10|u14) == UInt<4>("0xe"));
	assert((u10^u14) == UInt<4>("0x4"));
	assert((u10.andr()) == UInt<1>("0x0"));
	assert((u10.orr()) == UInt<1>("0x1"));
	assert((u10.xorr()) == UInt<1>("0x0"));
	assert(u10.cat(u14) == UInt<8>("0xae"));
	assert(u10/u14 == UInt<4>("0x0"));
	assert(u10%u14 == UInt<4>("0xa"));
	assert(u10+u15 == UInt<5>("0x19"));
	assert(u10-u15 == UInt<5>("0x1b"));
	assert(u10*u15 == UInt<8>("0x96"));
	assert(1 == (u10<u15));
	assert(1 == (u10<=u15));
	assert(0 == (u10>u15));
	assert(0 == (u10>=u15));
	assert(0 == (u10==u15));
	assert(1 == (u10!=u15));
	assert(u10.pad<3>() == UInt<4>("0xa"));
	assert(u10.shl<3>() == UInt<7>("0x50"));
	assert(u10.shr<3>() == UInt<1>("0x1"));
	assert((u10&u15) == UInt<4>("0xa"));
	assert((u10|u15) == UInt<4>("0xf"));
	assert((u10^u15) == UInt<4>("0x5"));
	assert((u10.andr()) == UInt<1>("0x0"));
	assert((u10.orr()) == UInt<1>("0x1"));
	assert((u10.xorr()) == UInt<1>("0x0"));
	assert(u10.cat(u15) == UInt<8>("0xaf"));
	assert(u10/u15 == UInt<4>("0x0"));
	assert(u10%u15 == UInt<4>("0xa"));
	assert(u11+u8 == UInt<5>("0x13"));
	assert(u11-u8 == UInt<5>("0x3"));
	assert(u11*u8 == UInt<8>("0x58"));
	assert(0 == (u11<u8));
	assert(0 == (u11<=u8));
	assert(1 == (u11>u8));
	assert(1 == (u11>=u8));
	assert(0 == (u11==u8));
	assert(1 == (u11!=u8));
	assert(u11.pad<3>() == UInt<4>("0xb"));
	assert(u11.shl<3>() == UInt<7>("0x58"));
	assert(u11.shr<3>() == UInt<1>("0x1"));
	assert((u11&u8) == UInt<4>("0x8"));
	assert((u11|u8) == UInt<4>("0xb"));
	assert((u11^u8) == UInt<4>("0x3"));
	assert((u11.andr()) == UInt<1>("0x0"));
	assert((u11.orr()) == UInt<1>("0x1"));
	assert((u11.xorr()) == UInt<1>("0x1"));
	assert(u11.cat(u8) == UInt<8>("0xb8"));
	assert(u11/u8 == UInt<4>("0x1"));
	assert(u11%u8 == UInt<4>("0x3"));
	assert(u11+u9 == UInt<5>("0x14"));
	assert(u11-u9 == UInt<5>("0x2"));
	assert(u11*u9 == UInt<8>("0x63"));
	assert(0 == (u11<u9));
	assert(0 == (u11<=u9));
	assert(1 == (u11>u9));
	assert(1 == (u11>=u9));
	assert(0 == (u11==u9));
	assert(1 == (u11!=u9));
	assert(u11.pad<3>() == UInt<4>("0xb"));
	assert(u11.shl<3>() == UInt<7>("0x58"));
	assert(u11.shr<3>() == UInt<1>("0x1"));
	assert((u11&u9) == UInt<4>("0x9"));
	assert((u11|u9) == UInt<4>("0xb"));
	assert((u11^u9) == UInt<4>("0x2"));
	assert((u11.andr()) == UInt<1>("0x0"));
	assert((u11.orr()) == UInt<1>("0x1"));
	assert((u11.xorr()) == UInt<1>("0x1"));
	assert(u11.cat(u9) == UInt<8>("0xb9"));
	assert(u11/u9 == UInt<4>("0x1"));
	assert(u11%u9 == UInt<4>("0x2"));
	assert(u11+u10 == UInt<5>("0x15"));
	assert(u11-u10 == UInt<5>("0x1"));
	assert(u11*u10 == UInt<8>("0x6e"));
	assert(0 == (u11<u10));
	assert(0 == (u11<=u10));
	assert(1 == (u11>u10));
	assert(1 == (u11>=u10));
	assert(0 == (u11==u10));
	assert(1 == (u11!=u10));
	assert(u11.pad<3>() == UInt<4>("0xb"));
	assert(u11.shl<3>() == UInt<7>("0x58"));
	assert(u11.shr<3>() == UInt<1>("0x1"));
	assert((u11&u10) == UInt<4>("0xa"));
	assert((u11|u10) == UInt<4>("0xb"));
	assert((u11^u10) == UInt<4>("0x1"));
	assert((u11.andr()) == UInt<1>("0x0"));
	assert((u11.orr()) == UInt<1>("0x1"));
	assert((u11.xorr()) == UInt<1>("0x1"));
	assert(u11.cat(u10) == UInt<8>("0xba"));
	assert(u11/u10 == UInt<4>("0x1"));
	assert(u11%u10 == UInt<4>("0x1"));
	assert(u11+u11 == UInt<5>("0x16"));
	assert(u11-u11 == UInt<5>("0x0"));
	assert(u11*u11 == UInt<8>("0x79"));
	assert(0 == (u11<u11));
	assert(1 == (u11<=u11));
	assert(0 == (u11>u11));
	assert(1 == (u11>=u11));
	assert(1 == (u11==u11));
	assert(0 == (u11!=u11));
	assert(u11.pad<3>() == UInt<4>("0xb"));
	assert(u11.shl<3>() == UInt<7>("0x58"));
	assert(u11.shr<3>() == UInt<1>("0x1"));
	assert((u11&u11) == UInt<4>("0xb"));
	assert((u11|u11) == UInt<4>("0xb"));
	assert((u11^u11) == UInt<4>("0x0"));
	assert((u11.andr()) == UInt<1>("0x0"));
	assert((u11.orr()) == UInt<1>("0x1"));
	assert((u11.xorr()) == UInt<1>("0x1"));
	assert(u11.cat(u11) == UInt<8>("0xbb"));
	assert(u11/u11 == UInt<4>("0x1"));
	assert(u11%u11 == UInt<4>("0x0"));
	assert(u11+u12 == UInt<5>("0x17"));
	assert(u11-u12 == UInt<5>("0x1f"));
	assert(u11*u12 == UInt<8>("0x84"));
	assert(1 == (u11<u12));
	assert(1 == (u11<=u12));
	assert(0 == (u11>u12));
	assert(0 == (u11>=u12));
	assert(0 == (u11==u12));
	assert(1 == (u11!=u12));
	assert(u11.pad<3>() == UInt<4>("0xb"));
	assert(u11.shl<3>() == UInt<7>("0x58"));
	assert(u11.shr<3>() == UInt<1>("0x1"));
	assert((u11&u12) == UInt<4>("0x8"));
	assert((u11|u12) == UInt<4>("0xf"));
	assert((u11^u12) == UInt<4>("0x7"));
	assert((u11.andr()) == UInt<1>("0x0"));
	assert((u11.orr()) == UInt<1>("0x1"));
	assert((u11.xorr()) == UInt<1>("0x1"));
	assert(u11.cat(u12) == UInt<8>("0xbc"));
	assert(u11/u12 == UInt<4>("0x0"));
	assert(u11%u12 == UInt<4>("0xb"));
	assert(u11+u13 == UInt<5>("0x18"));
	assert(u11-u13 == UInt<5>("0x1e"));
	assert(u11*u13 == UInt<8>("0x8f"));
	assert(1 == (u11<u13));
	assert(1 == (u11<=u13));
	assert(0 == (u11>u13));
	assert(0 == (u11>=u13));
	assert(0 == (u11==u13));
	assert(1 == (u11!=u13));
	assert(u11.pad<3>() == UInt<4>("0xb"));
	assert(u11.shl<3>() == UInt<7>("0x58"));
	assert(u11.shr<3>() == UInt<1>("0x1"));
	assert((u11&u13) == UInt<4>("0x9"));
	assert((u11|u13) == UInt<4>("0xf"));
	assert((u11^u13) == UInt<4>("0x6"));
	assert((u11.andr()) == UInt<1>("0x0"));
	assert((u11.orr()) == UInt<1>("0x1"));
	assert((u11.xorr()) == UInt<1>("0x1"));
	assert(u11.cat(u13) == UInt<8>("0xbd"));
	assert(u11/u13 == UInt<4>("0x0"));
	assert(u11%u13 == UInt<4>("0xb"));
	assert(u11+u14 == UInt<5>("0x19"));
	assert(u11-u14 == UInt<5>("0x1d"));
	assert(u11*u14 == UInt<8>("0x9a"));
	assert(1 == (u11<u14));
	assert(1 == (u11<=u14));
	assert(0 == (u11>u14));
	assert(0 == (u11>=u14));
	assert(0 == (u11==u14));
	assert(1 == (u11!=u14));
	assert(u11.pad<3>() == UInt<4>("0xb"));
	assert(u11.shl<3>() == UInt<7>("0x58"));
	assert(u11.shr<3>() == UInt<1>("0x1"));
	assert((u11&u14) == UInt<4>("0xa"));
	assert((u11|u14) == UInt<4>("0xf"));
	assert((u11^u14) == UInt<4>("0x5"));
	assert((u11.andr()) == UInt<1>("0x0"));
	assert((u11.orr()) == UInt<1>("0x1"));
	assert((u11.xorr()) == UInt<1>("0x1"));
	assert(u11.cat(u14) == UInt<8>("0xbe"));
	assert(u11/u14 == UInt<4>("0x0"));
	assert(u11%u14 == UInt<4>("0xb"));
	assert(u11+u15 == UInt<5>("0x1a"));
	assert(u11-u15 == UInt<5>("0x1c"));
	assert(u11*u15 == UInt<8>("0xa5"));
	assert(1 == (u11<u15));
	assert(1 == (u11<=u15));
	assert(0 == (u11>u15));
	assert(0 == (u11>=u15));
	assert(0 == (u11==u15));
	assert(1 == (u11!=u15));
	assert(u11.pad<3>() == UInt<4>("0xb"));
	assert(u11.shl<3>() == UInt<7>("0x58"));
	assert(u11.shr<3>() == UInt<1>("0x1"));
	assert((u11&u15) == UInt<4>("0xb"));
	assert((u11|u15) == UInt<4>("0xf"));
	assert((u11^u15) == UInt<4>("0x4"));
	assert((u11.andr()) == UInt<1>("0x0"));
	assert((u11.orr()) == UInt<1>("0x1"));
	assert((u11.xorr()) == UInt<1>("0x1"));
	assert(u11.cat(u15) == UInt<8>("0xbf"));
	assert(u11/u15 == UInt<4>("0x0"));
	assert(u11%u15 == UInt<4>("0xb"));
	assert(u12+u8 == UInt<5>("0x14"));
	assert(u12-u8 == UInt<5>("0x4"));
	assert(u12*u8 == UInt<8>("0x60"));
	assert(0 == (u12<u8));
	assert(0 == (u12<=u8));
	assert(1 == (u12>u8));
	assert(1 == (u12>=u8));
	assert(0 == (u12==u8));
	assert(1 == (u12!=u8));
	assert(u12.pad<3>() == UInt<4>("0xc"));
	assert(u12.shl<3>() == UInt<7>("0x60"));
	assert(u12.shr<3>() == UInt<1>("0x1"));
	assert((u12&u8) == UInt<4>("0x8"));
	assert((u12|u8) == UInt<4>("0xc"));
	assert((u12^u8) == UInt<4>("0x4"));
	assert((u12.andr()) == UInt<1>("0x0"));
	assert((u12.orr()) == UInt<1>("0x1"));
	assert((u12.xorr()) == UInt<1>("0x0"));
	assert(u12.cat(u8) == UInt<8>("0xc8"));
	assert(u12/u8 == UInt<4>("0x1"));
	assert(u12%u8 == UInt<4>("0x4"));
	assert(u12+u9 == UInt<5>("0x15"));
	assert(u12-u9 == UInt<5>("0x3"));
	assert(u12*u9 == UInt<8>("0x6c"));
	assert(0 == (u12<u9));
	assert(0 == (u12<=u9));
	assert(1 == (u12>u9));
	assert(1 == (u12>=u9));
	assert(0 == (u12==u9));
	assert(1 == (u12!=u9));
	assert(u12.pad<3>() == UInt<4>("0xc"));
	assert(u12.shl<3>() == UInt<7>("0x60"));
	assert(u12.shr<3>() == UInt<1>("0x1"));
	assert((u12&u9) == UInt<4>("0x8"));
	assert((u12|u9) == UInt<4>("0xd"));
	assert((u12^u9) == UInt<4>("0x5"));
	assert((u12.andr()) == UInt<1>("0x0"));
	assert((u12.orr()) == UInt<1>("0x1"));
	assert((u12.xorr()) == UInt<1>("0x0"));
	assert(u12.cat(u9) == UInt<8>("0xc9"));
	assert(u12/u9 == UInt<4>("0x1"));
	assert(u12%u9 == UInt<4>("0x3"));
	assert(u12+u10 == UInt<5>("0x16"));
	assert(u12-u10 == UInt<5>("0x2"));
	assert(u12*u10 == UInt<8>("0x78"));
	assert(0 == (u12<u10));
	assert(0 == (u12<=u10));
	assert(1 == (u12>u10));
	assert(1 == (u12>=u10));
	assert(0 == (u12==u10));
	assert(1 == (u12!=u10));
	assert(u12.pad<3>() == UInt<4>("0xc"));
	assert(u12.shl<3>() == UInt<7>("0x60"));
	assert(u12.shr<3>() == UInt<1>("0x1"));
	assert((u12&u10) == UInt<4>("0x8"));
	assert((u12|u10) == UInt<4>("0xe"));
	assert((u12^u10) == UInt<4>("0x6"));
	assert((u12.andr()) == UInt<1>("0x0"));
	assert((u12.orr()) == UInt<1>("0x1"));
	assert((u12.xorr()) == UInt<1>("0x0"));
	assert(u12.cat(u10) == UInt<8>("0xca"));
	assert(u12/u10 == UInt<4>("0x1"));
	assert(u12%u10 == UInt<4>("0x2"));
	assert(u12+u11 == UInt<5>("0x17"));
	assert(u12-u11 == UInt<5>("0x1"));
	assert(u12*u11 == UInt<8>("0x84"));
	assert(0 == (u12<u11));
	assert(0 == (u12<=u11));
	assert(1 == (u12>u11));
	assert(1 == (u12>=u11));
	assert(0 == (u12==u11));
	assert(1 == (u12!=u11));
	assert(u12.pad<3>() == UInt<4>("0xc"));
	assert(u12.shl<3>() == UInt<7>("0x60"));
	assert(u12.shr<3>() == UInt<1>("0x1"));
	assert((u12&u11) == UInt<4>("0x8"));
	assert((u12|u11) == UInt<4>("0xf"));
	assert((u12^u11) == UInt<4>("0x7"));
	assert((u12.andr()) == UInt<1>("0x0"));
	assert((u12.orr()) == UInt<1>("0x1"));
	assert((u12.xorr()) == UInt<1>("0x0"));
	assert(u12.cat(u11) == UInt<8>("0xcb"));
	assert(u12/u11 == UInt<4>("0x1"));
	assert(u12%u11 == UInt<4>("0x1"));
	assert(u12+u12 == UInt<5>("0x18"));
	assert(u12-u12 == UInt<5>("0x0"));
	assert(u12*u12 == UInt<8>("0x90"));
	assert(0 == (u12<u12));
	assert(1 == (u12<=u12));
	assert(0 == (u12>u12));
	assert(1 == (u12>=u12));
	assert(1 == (u12==u12));
	assert(0 == (u12!=u12));
	assert(u12.pad<3>() == UInt<4>("0xc"));
	assert(u12.shl<3>() == UInt<7>("0x60"));
	assert(u12.shr<3>() == UInt<1>("0x1"));
	assert((u12&u12) == UInt<4>("0xc"));
	assert((u12|u12) == UInt<4>("0xc"));
	assert((u12^u12) == UInt<4>("0x0"));
	assert((u12.andr()) == UInt<1>("0x0"));
	assert((u12.orr()) == UInt<1>("0x1"));
	assert((u12.xorr()) == UInt<1>("0x0"));
	assert(u12.cat(u12) == UInt<8>("0xcc"));
	assert(u12/u12 == UInt<4>("0x1"));
	assert(u12%u12 == UInt<4>("0x0"));
	assert(u12+u13 == UInt<5>("0x19"));
	assert(u12-u13 == UInt<5>("0x1f"));
	assert(u12*u13 == UInt<8>("0x9c"));
	assert(1 == (u12<u13));
	assert(1 == (u12<=u13));
	assert(0 == (u12>u13));
	assert(0 == (u12>=u13));
	assert(0 == (u12==u13));
	assert(1 == (u12!=u13));
	assert(u12.pad<3>() == UInt<4>("0xc"));
	assert(u12.shl<3>() == UInt<7>("0x60"));
	assert(u12.shr<3>() == UInt<1>("0x1"));
	assert((u12&u13) == UInt<4>("0xc"));
	assert((u12|u13) == UInt<4>("0xd"));
	assert((u12^u13) == UInt<4>("0x1"));
	assert((u12.andr()) == UInt<1>("0x0"));
	assert((u12.orr()) == UInt<1>("0x1"));
	assert((u12.xorr()) == UInt<1>("0x0"));
	assert(u12.cat(u13) == UInt<8>("0xcd"));
	assert(u12/u13 == UInt<4>("0x0"));
	assert(u12%u13 == UInt<4>("0xc"));
	assert(u12+u14 == UInt<5>("0x1a"));
	assert(u12-u14 == UInt<5>("0x1e"));
	assert(u12*u14 == UInt<8>("0xa8"));
	assert(1 == (u12<u14));
	assert(1 == (u12<=u14));
	assert(0 == (u12>u14));
	assert(0 == (u12>=u14));
	assert(0 == (u12==u14));
	assert(1 == (u12!=u14));
	assert(u12.pad<3>() == UInt<4>("0xc"));
	assert(u12.shl<3>() == UInt<7>("0x60"));
	assert(u12.shr<3>() == UInt<1>("0x1"));
	assert((u12&u14) == UInt<4>("0xc"));
	assert((u12|u14) == UInt<4>("0xe"));
	assert((u12^u14) == UInt<4>("0x2"));
	assert((u12.andr()) == UInt<1>("0x0"));
	assert((u12.orr()) == UInt<1>("0x1"));
	assert((u12.xorr()) == UInt<1>("0x0"));
	assert(u12.cat(u14) == UInt<8>("0xce"));
	assert(u12/u14 == UInt<4>("0x0"));
	assert(u12%u14 == UInt<4>("0xc"));
	assert(u12+u15 == UInt<5>("0x1b"));
	assert(u12-u15 == UInt<5>("0x1d"));
	assert(u12*u15 == UInt<8>("0xb4"));
	assert(1 == (u12<u15));
	assert(1 == (u12<=u15));
	assert(0 == (u12>u15));
	assert(0 == (u12>=u15));
	assert(0 == (u12==u15));
	assert(1 == (u12!=u15));
	assert(u12.pad<3>() == UInt<4>("0xc"));
	assert(u12.shl<3>() == UInt<7>("0x60"));
	assert(u12.shr<3>() == UInt<1>("0x1"));
	assert((u12&u15) == UInt<4>("0xc"));
	assert((u12|u15) == UInt<4>("0xf"));
	assert((u12^u15) == UInt<4>("0x3"));
	assert((u12.andr()) == UInt<1>("0x0"));
	assert((u12.orr()) == UInt<1>("0x1"));
	assert((u12.xorr()) == UInt<1>("0x0"));
	assert(u12.cat(u15) == UInt<8>("0xcf"));
	assert(u12/u15 == UInt<4>("0x0"));
	assert(u12%u15 == UInt<4>("0xc"));
	assert(u13+u8 == UInt<5>("0x15"));
	assert(u13-u8 == UInt<5>("0x5"));
	assert(u13*u8 == UInt<8>("0x68"));
	assert(0 == (u13<u8));
	assert(0 == (u13<=u8));
	assert(1 == (u13>u8));
	assert(1 == (u13>=u8));
	assert(0 == (u13==u8));
	assert(1 == (u13!=u8));
	assert(u13.pad<3>() == UInt<4>("0xd"));
	assert(u13.shl<3>() == UInt<7>("0x68"));
	assert(u13.shr<3>() == UInt<1>("0x1"));
	assert((u13&u8) == UInt<4>("0x8"));
	assert((u13|u8) == UInt<4>("0xd"));
	assert((u13^u8) == UInt<4>("0x5"));
	assert((u13.andr()) == UInt<1>("0x0"));
	assert((u13.orr()) == UInt<1>("0x1"));
	assert((u13.xorr()) == UInt<1>("0x1"));
	assert(u13.cat(u8) == UInt<8>("0xd8"));
	assert(u13/u8 == UInt<4>("0x1"));
	assert(u13%u8 == UInt<4>("0x5"));
	assert(u13+u9 == UInt<5>("0x16"));
	assert(u13-u9 == UInt<5>("0x4"));
	assert(u13*u9 == UInt<8>("0x75"));
	assert(0 == (u13<u9));
	assert(0 == (u13<=u9));
	assert(1 == (u13>u9));
	assert(1 == (u13>=u9));
	assert(0 == (u13==u9));
	assert(1 == (u13!=u9));
	assert(u13.pad<3>() == UInt<4>("0xd"));
	assert(u13.shl<3>() == UInt<7>("0x68"));
	assert(u13.shr<3>() == UInt<1>("0x1"));
	assert((u13&u9) == UInt<4>("0x9"));
	assert((u13|u9) == UInt<4>("0xd"));
	assert((u13^u9) == UInt<4>("0x4"));
	assert((u13.andr()) == UInt<1>("0x0"));
	assert((u13.orr()) == UInt<1>("0x1"));
	assert((u13.xorr()) == UInt<1>("0x1"));
	assert(u13.cat(u9) == UInt<8>("0xd9"));
	assert(u13/u9 == UInt<4>("0x1"));
	assert(u13%u9 == UInt<4>("0x4"));
	assert(u13+u10 == UInt<5>("0x17"));
	assert(u13-u10 == UInt<5>("0x3"));
	assert(u13*u10 == UInt<8>("0x82"));
	assert(0 == (u13<u10));
	assert(0 == (u13<=u10));
	assert(1 == (u13>u10));
	assert(1 == (u13>=u10));
	assert(0 == (u13==u10));
	assert(1 == (u13!=u10));
	assert(u13.pad<3>() == UInt<4>("0xd"));
	assert(u13.shl<3>() == UInt<7>("0x68"));
	assert(u13.shr<3>() == UInt<1>("0x1"));
	assert((u13&u10) == UInt<4>("0x8"));
	assert((u13|u10) == UInt<4>("0xf"));
	assert((u13^u10) == UInt<4>("0x7"));
	assert((u13.andr()) == UInt<1>("0x0"));
	assert((u13.orr()) == UInt<1>("0x1"));
	assert((u13.xorr()) == UInt<1>("0x1"));
	assert(u13.cat(u10) == UInt<8>("0xda"));
	assert(u13/u10 == UInt<4>("0x1"));
	assert(u13%u10 == UInt<4>("0x3"));
	assert(u13+u11 == UInt<5>("0x18"));
	assert(u13-u11 == UInt<5>("0x2"));
	assert(u13*u11 == UInt<8>("0x8f"));
	assert(0 == (u13<u11));
	assert(0 == (u13<=u11));
	assert(1 == (u13>u11));
	assert(1 == (u13>=u11));
	assert(0 == (u13==u11));
	assert(1 == (u13!=u11));
	assert(u13.pad<3>() == UInt<4>("0xd"));
	assert(u13.shl<3>() == UInt<7>("0x68"));
	assert(u13.shr<3>() == UInt<1>("0x1"));
	assert((u13&u11) == UInt<4>("0x9"));
	assert((u13|u11) == UInt<4>("0xf"));
	assert((u13^u11) == UInt<4>("0x6"));
	assert((u13.andr()) == UInt<1>("0x0"));
	assert((u13.orr()) == UInt<1>("0x1"));
	assert((u13.xorr()) == UInt<1>("0x1"));
	assert(u13.cat(u11) == UInt<8>("0xdb"));
	assert(u13/u11 == UInt<4>("0x1"));
	assert(u13%u11 == UInt<4>("0x2"));
	assert(u13+u12 == UInt<5>("0x19"));
	assert(u13-u12 == UInt<5>("0x1"));
	assert(u13*u12 == UInt<8>("0x9c"));
	assert(0 == (u13<u12));
	assert(0 == (u13<=u12));
	assert(1 == (u13>u12));
	assert(1 == (u13>=u12));
	assert(0 == (u13==u12));
	assert(1 == (u13!=u12));
	assert(u13.pad<3>() == UInt<4>("0xd"));
	assert(u13.shl<3>() == UInt<7>("0x68"));
	assert(u13.shr<3>() == UInt<1>("0x1"));
	assert((u13&u12) == UInt<4>("0xc"));
	assert((u13|u12) == UInt<4>("0xd"));
	assert((u13^u12) == UInt<4>("0x1"));
	assert((u13.andr()) == UInt<1>("0x0"));
	assert((u13.orr()) == UInt<1>("0x1"));
	assert((u13.xorr()) == UInt<1>("0x1"));
	assert(u13.cat(u12) == UInt<8>("0xdc"));
	assert(u13/u12 == UInt<4>("0x1"));
	assert(u13%u12 == UInt<4>("0x1"));
	assert(u13+u13 == UInt<5>("0x1a"));
	assert(u13-u13 == UInt<5>("0x0"));
	assert(u13*u13 == UInt<8>("0xa9"));
	assert(0 == (u13<u13));
	assert(1 == (u13<=u13));
	assert(0 == (u13>u13));
	assert(1 == (u13>=u13));
	assert(1 == (u13==u13));
	assert(0 == (u13!=u13));
	assert(u13.pad<3>() == UInt<4>("0xd"));
	assert(u13.shl<3>() == UInt<7>("0x68"));
	assert(u13.shr<3>() == UInt<1>("0x1"));
	assert((u13&u13) == UInt<4>("0xd"));
	assert((u13|u13) == UInt<4>("0xd"));
	assert((u13^u13) == UInt<4>("0x0"));
	assert((u13.andr()) == UInt<1>("0x0"));
	assert((u13.orr()) == UInt<1>("0x1"));
	assert((u13.xorr()) == UInt<1>("0x1"));
	assert(u13.cat(u13) == UInt<8>("0xdd"));
	assert(u13/u13 == UInt<4>("0x1"));
	assert(u13%u13 == UInt<4>("0x0"));
	assert(u13+u14 == UInt<5>("0x1b"));
	assert(u13-u14 == UInt<5>("0x1f"));
	assert(u13*u14 == UInt<8>("0xb6"));
	assert(1 == (u13<u14));
	assert(1 == (u13<=u14));
	assert(0 == (u13>u14));
	assert(0 == (u13>=u14));
	assert(0 == (u13==u14));
	assert(1 == (u13!=u14));
	assert(u13.pad<3>() == UInt<4>("0xd"));
	assert(u13.shl<3>() == UInt<7>("0x68"));
	assert(u13.shr<3>() == UInt<1>("0x1"));
	assert((u13&u14) == UInt<4>("0xc"));
	assert((u13|u14) == UInt<4>("0xf"));
	assert((u13^u14) == UInt<4>("0x3"));
	assert((u13.andr()) == UInt<1>("0x0"));
	assert((u13.orr()) == UInt<1>("0x1"));
	assert((u13.xorr()) == UInt<1>("0x1"));
	assert(u13.cat(u14) == UInt<8>("0xde"));
	assert(u13/u14 == UInt<4>("0x0"));
	assert(u13%u14 == UInt<4>("0xd"));
	assert(u13+u15 == UInt<5>("0x1c"));
	assert(u13-u15 == UInt<5>("0x1e"));
	assert(u13*u15 == UInt<8>("0xc3"));
	assert(1 == (u13<u15));
	assert(1 == (u13<=u15));
	assert(0 == (u13>u15));
	assert(0 == (u13>=u15));
	assert(0 == (u13==u15));
	assert(1 == (u13!=u15));
	assert(u13.pad<3>() == UInt<4>("0xd"));
	assert(u13.shl<3>() == UInt<7>("0x68"));
	assert(u13.shr<3>() == UInt<1>("0x1"));
	assert((u13&u15) == UInt<4>("0xd"));
	assert((u13|u15) == UInt<4>("0xf"));
	assert((u13^u15) == UInt<4>("0x2"));
	assert((u13.andr()) == UInt<1>("0x0"));
	assert((u13.orr()) == UInt<1>("0x1"));
	assert((u13.xorr()) == UInt<1>("0x1"));
	assert(u13.cat(u15) == UInt<8>("0xdf"));
	assert(u13/u15 == UInt<4>("0x0"));
	assert(u13%u15 == UInt<4>("0xd"));
	assert(u14+u8 == UInt<5>("0x16"));
	assert(u14-u8 == UInt<5>("0x6"));
	assert(u14*u8 == UInt<8>("0x70"));
	assert(0 == (u14<u8));
	assert(0 == (u14<=u8));
	assert(1 == (u14>u8));
	assert(1 == (u14>=u8));
	assert(0 == (u14==u8));
	assert(1 == (u14!=u8));
	assert(u14.pad<3>() == UInt<4>("0xe"));
	assert(u14.shl<3>() == UInt<7>("0x70"));
	assert(u14.shr<3>() == UInt<1>("0x1"));
	assert((u14&u8) == UInt<4>("0x8"));
	assert((u14|u8) == UInt<4>("0xe"));
	assert((u14^u8) == UInt<4>("0x6"));
	assert((u14.andr()) == UInt<1>("0x0"));
	assert((u14.orr()) == UInt<1>("0x1"));
	assert((u14.xorr()) == UInt<1>("0x1"));
	assert(u14.cat(u8) == UInt<8>("0xe8"));
	assert(u14/u8 == UInt<4>("0x1"));
	assert(u14%u8 == UInt<4>("0x6"));
	assert(u14+u9 == UInt<5>("0x17"));
	assert(u14-u9 == UInt<5>("0x5"));
	assert(u14*u9 == UInt<8>("0x7e"));
	assert(0 == (u14<u9));
	assert(0 == (u14<=u9));
	assert(1 == (u14>u9));
	assert(1 == (u14>=u9));
	assert(0 == (u14==u9));
	assert(1 == (u14!=u9));
	assert(u14.pad<3>() == UInt<4>("0xe"));
	assert(u14.shl<3>() == UInt<7>("0x70"));
	assert(u14.shr<3>() == UInt<1>("0x1"));
	assert((u14&u9) == UInt<4>("0x8"));
	assert((u14|u9) == UInt<4>("0xf"));
	assert((u14^u9) == UInt<4>("0x7"));
	assert((u14.andr()) == UInt<1>("0x0"));
	assert((u14.orr()) == UInt<1>("0x1"));
	assert((u14.xorr()) == UInt<1>("0x1"));
	assert(u14.cat(u9) == UInt<8>("0xe9"));
	assert(u14/u9 == UInt<4>("0x1"));
	assert(u14%u9 == UInt<4>("0x5"));
	assert(u14+u10 == UInt<5>("0x18"));
	assert(u14-u10 == UInt<5>("0x4"));
	assert(u14*u10 == UInt<8>("0x8c"));
	assert(0 == (u14<u10));
	assert(0 == (u14<=u10));
	assert(1 == (u14>u10));
	assert(1 == (u14>=u10));
	assert(0 == (u14==u10));
	assert(1 == (u14!=u10));
	assert(u14.pad<3>() == UInt<4>("0xe"));
	assert(u14.shl<3>() == UInt<7>("0x70"));
	assert(u14.shr<3>() == UInt<1>("0x1"));
	assert((u14&u10) == UInt<4>("0xa"));
	assert((u14|u10) == UInt<4>("0xe"));
	assert((u14^u10) == UInt<4>("0x4"));
	assert((u14.andr()) == UInt<1>("0x0"));
	assert((u14.orr()) == UInt<1>("0x1"));
	assert((u14.xorr()) == UInt<1>("0x1"));
	assert(u14.cat(u10) == UInt<8>("0xea"));
	assert(u14/u10 == UInt<4>("0x1"));
	assert(u14%u10 == UInt<4>("0x4"));
	assert(u14+u11 == UInt<5>("0x19"));
	assert(u14-u11 == UInt<5>("0x3"));
	assert(u14*u11 == UInt<8>("0x9a"));
	assert(0 == (u14<u11));
	assert(0 == (u14<=u11));
	assert(1 == (u14>u11));
	assert(1 == (u14>=u11));
	assert(0 == (u14==u11));
	assert(1 == (u14!=u11));
	assert(u14.pad<3>() == UInt<4>("0xe"));
	assert(u14.shl<3>() == UInt<7>("0x70"));
	assert(u14.shr<3>() == UInt<1>("0x1"));
	assert((u14&u11) == UInt<4>("0xa"));
	assert((u14|u11) == UInt<4>("0xf"));
	assert((u14^u11) == UInt<4>("0x5"));
	assert((u14.andr()) == UInt<1>("0x0"));
	assert((u14.orr()) == UInt<1>("0x1"));
	assert((u14.xorr()) == UInt<1>("0x1"));
	assert(u14.cat(u11) == UInt<8>("0xeb"));
	assert(u14/u11 == UInt<4>("0x1"));
	assert(u14%u11 == UInt<4>("0x3"));
	assert(u14+u12 == UInt<5>("0x1a"));
	assert(u14-u12 == UInt<5>("0x2"));
	assert(u14*u12 == UInt<8>("0xa8"));
	assert(0 == (u14<u12));
	assert(0 == (u14<=u12));
	assert(1 == (u14>u12));
	assert(1 == (u14>=u12));
	assert(0 == (u14==u12));
	assert(1 == (u14!=u12));
	assert(u14.pad<3>() == UInt<4>("0xe"));
	assert(u14.shl<3>() == UInt<7>("0x70"));
	assert(u14.shr<3>() == UInt<1>("0x1"));
	assert((u14&u12) == UInt<4>("0xc"));
	assert((u14|u12) == UInt<4>("0xe"));
	assert((u14^u12) == UInt<4>("0x2"));
	assert((u14.andr()) == UInt<1>("0x0"));
	assert((u14.orr()) == UInt<1>("0x1"));
	assert((u14.xorr()) == UInt<1>("0x1"));
	assert(u14.cat(u12) == UInt<8>("0xec"));
	assert(u14/u12 == UInt<4>("0x1"));
	assert(u14%u12 == UInt<4>("0x2"));
	assert(u14+u13 == UInt<5>("0x1b"));
	assert(u14-u13 == UInt<5>("0x1"));
	assert(u14*u13 == UInt<8>("0xb6"));
	assert(0 == (u14<u13));
	assert(0 == (u14<=u13));
	assert(1 == (u14>u13));
	assert(1 == (u14>=u13));
	assert(0 == (u14==u13));
	assert(1 == (u14!=u13));
	assert(u14.pad<3>() == UInt<4>("0xe"));
	assert(u14.shl<3>() == UInt<7>("0x70"));
	assert(u14.shr<3>() == UInt<1>("0x1"));
	assert((u14&u13) == UInt<4>("0xc"));
	assert((u14|u13) == UInt<4>("0xf"));
	assert((u14^u13) == UInt<4>("0x3"));
	assert((u14.andr()) == UInt<1>("0x0"));
	assert((u14.orr()) == UInt<1>("0x1"));
	assert((u14.xorr()) == UInt<1>("0x1"));
	assert(u14.cat(u13) == UInt<8>("0xed"));
	assert(u14/u13 == UInt<4>("0x1"));
	assert(u14%u13 == UInt<4>("0x1"));
	assert(u14+u14 == UInt<5>("0x1c"));
	assert(u14-u14 == UInt<5>("0x0"));
	assert(u14*u14 == UInt<8>("0xc4"));
	assert(0 == (u14<u14));
	assert(1 == (u14<=u14));
	assert(0 == (u14>u14));
	assert(1 == (u14>=u14));
	assert(1 == (u14==u14));
	assert(0 == (u14!=u14));
	assert(u14.pad<3>() == UInt<4>("0xe"));
	assert(u14.shl<3>() == UInt<7>("0x70"));
	assert(u14.shr<3>() == UInt<1>("0x1"));
	assert((u14&u14) == UInt<4>("0xe"));
	assert((u14|u14) == UInt<4>("0xe"));
	assert((u14^u14) == UInt<4>("0x0"));
	assert((u14.andr()) == UInt<1>("0x0"));
	assert((u14.orr()) == UInt<1>("0x1"));
	assert((u14.xorr()) == UInt<1>("0x1"));
	assert(u14.cat(u14) == UInt<8>("0xee"));
	assert(u14/u14 == UInt<4>("0x1"));
	assert(u14%u14 == UInt<4>("0x0"));
	assert(u14+u15 == UInt<5>("0x1d"));
	assert(u14-u15 == UInt<5>("0x1f"));
	assert(u14*u15 == UInt<8>("0xd2"));
	assert(1 == (u14<u15));
	assert(1 == (u14<=u15));
	assert(0 == (u14>u15));
	assert(0 == (u14>=u15));
	assert(0 == (u14==u15));
	assert(1 == (u14!=u15));
	assert(u14.pad<3>() == UInt<4>("0xe"));
	assert(u14.shl<3>() == UInt<7>("0x70"));
	assert(u14.shr<3>() == UInt<1>("0x1"));
	assert((u14&u15) == UInt<4>("0xe"));
	assert((u14|u15) == UInt<4>("0xf"));
	assert((u14^u15) == UInt<4>("0x1"));
	assert((u14.andr()) == UInt<1>("0x0"));
	assert((u14.orr()) == UInt<1>("0x1"));
	assert((u14.xorr()) == UInt<1>("0x1"));
	assert(u14.cat(u15) == UInt<8>("0xef"));
	assert(u14/u15 == UInt<4>("0x0"));
	assert(u14%u15 == UInt<4>("0xe"));
	assert(u15+u8 == UInt<5>("0x17"));
	assert(u15-u8 == UInt<5>("0x7"));
	assert(u15*u8 == UInt<8>("0x78"));
	assert(0 == (u15<u8));
	assert(0 == (u15<=u8));
	assert(1 == (u15>u8));
	assert(1 == (u15>=u8));
	assert(0 == (u15==u8));
	assert(1 == (u15!=u8));
	assert(u15.pad<3>() == UInt<4>("0xf"));
	assert(u15.shl<3>() == UInt<7>("0x78"));
	assert(u15.shr<3>() == UInt<1>("0x1"));
	assert((u15&u8) == UInt<4>("0x8"));
	assert((u15|u8) == UInt<4>("0xf"));
	assert((u15^u8) == UInt<4>("0x7"));
	assert((u15.andr()) == UInt<1>("0x1"));
	assert((u15.orr()) == UInt<1>("0x1"));
	assert((u15.xorr()) == UInt<1>("0x0"));
	assert(u15.cat(u8) == UInt<8>("0xf8"));
	assert(u15/u8 == UInt<4>("0x1"));
	assert(u15%u8 == UInt<4>("0x7"));
	assert(u15+u9 == UInt<5>("0x18"));
	assert(u15-u9 == UInt<5>("0x6"));
	assert(u15*u9 == UInt<8>("0x87"));
	assert(0 == (u15<u9));
	assert(0 == (u15<=u9));
	assert(1 == (u15>u9));
	assert(1 == (u15>=u9));
	assert(0 == (u15==u9));
	assert(1 == (u15!=u9));
	assert(u15.pad<3>() == UInt<4>("0xf"));
	assert(u15.shl<3>() == UInt<7>("0x78"));
	assert(u15.shr<3>() == UInt<1>("0x1"));
	assert((u15&u9) == UInt<4>("0x9"));
	assert((u15|u9) == UInt<4>("0xf"));
	assert((u15^u9) == UInt<4>("0x6"));
	assert((u15.andr()) == UInt<1>("0x1"));
	assert((u15.orr()) == UInt<1>("0x1"));
	assert((u15.xorr()) == UInt<1>("0x0"));
	assert(u15.cat(u9) == UInt<8>("0xf9"));
	assert(u15/u9 == UInt<4>("0x1"));
	assert(u15%u9 == UInt<4>("0x6"));
	assert(u15+u10 == UInt<5>("0x19"));
	assert(u15-u10 == UInt<5>("0x5"));
	assert(u15*u10 == UInt<8>("0x96"));
	assert(0 == (u15<u10));
	assert(0 == (u15<=u10));
	assert(1 == (u15>u10));
	assert(1 == (u15>=u10));
	assert(0 == (u15==u10));
	assert(1 == (u15!=u10));
	assert(u15.pad<3>() == UInt<4>("0xf"));
	assert(u15.shl<3>() == UInt<7>("0x78"));
	assert(u15.shr<3>() == UInt<1>("0x1"));
	assert((u15&u10) == UInt<4>("0xa"));
	assert((u15|u10) == UInt<4>("0xf"));
	assert((u15^u10) == UInt<4>("0x5"));
	assert((u15.andr()) == UInt<1>("0x1"));
	assert((u15.orr()) == UInt<1>("0x1"));
	assert((u15.xorr()) == UInt<1>("0x0"));
	assert(u15.cat(u10) == UInt<8>("0xfa"));
	assert(u15/u10 == UInt<4>("0x1"));
	assert(u15%u10 == UInt<4>("0x5"));
	assert(u15+u11 == UInt<5>("0x1a"));
	assert(u15-u11 == UInt<5>("0x4"));
	assert(u15*u11 == UInt<8>("0xa5"));
	assert(0 == (u15<u11));
	assert(0 == (u15<=u11));
	assert(1 == (u15>u11));
	assert(1 == (u15>=u11));
	assert(0 == (u15==u11));
	assert(1 == (u15!=u11));
	assert(u15.pad<3>() == UInt<4>("0xf"));
	assert(u15.shl<3>() == UInt<7>("0x78"));
	assert(u15.shr<3>() == UInt<1>("0x1"));
	assert((u15&u11) == UInt<4>("0xb"));
	assert((u15|u11) == UInt<4>("0xf"));
	assert((u15^u11) == UInt<4>("0x4"));
	assert((u15.andr()) == UInt<1>("0x1"));
	assert((u15.orr()) == UInt<1>("0x1"));
	assert((u15.xorr()) == UInt<1>("0x0"));
	assert(u15.cat(u11) == UInt<8>("0xfb"));
	assert(u15/u11 == UInt<4>("0x1"));
	assert(u15%u11 == UInt<4>("0x4"));
	assert(u15+u12 == UInt<5>("0x1b"));
	assert(u15-u12 == UInt<5>("0x3"));
	assert(u15*u12 == UInt<8>("0xb4"));
	assert(0 == (u15<u12));
	assert(0 == (u15<=u12));
	assert(1 == (u15>u12));
	assert(1 == (u15>=u12));
	assert(0 == (u15==u12));
	assert(1 == (u15!=u12));
	assert(u15.pad<3>() == UInt<4>("0xf"));
	assert(u15.shl<3>() == UInt<7>("0x78"));
	assert(u15.shr<3>() == UInt<1>("0x1"));
	assert((u15&u12) == UInt<4>("0xc"));
	assert((u15|u12) == UInt<4>("0xf"));
	assert((u15^u12) == UInt<4>("0x3"));
	assert((u15.andr()) == UInt<1>("0x1"));
	assert((u15.orr()) == UInt<1>("0x1"));
	assert((u15.xorr()) == UInt<1>("0x0"));
	assert(u15.cat(u12) == UInt<8>("0xfc"));
	assert(u15/u12 == UInt<4>("0x1"));
	assert(u15%u12 == UInt<4>("0x3"));
	assert(u15+u13 == UInt<5>("0x1c"));
	assert(u15-u13 == UInt<5>("0x2"));
	assert(u15*u13 == UInt<8>("0xc3"));
	assert(0 == (u15<u13));
	assert(0 == (u15<=u13));
	assert(1 == (u15>u13));
	assert(1 == (u15>=u13));
	assert(0 == (u15==u13));
	assert(1 == (u15!=u13));
	assert(u15.pad<3>() == UInt<4>("0xf"));
	assert(u15.shl<3>() == UInt<7>("0x78"));
	assert(u15.shr<3>() == UInt<1>("0x1"));
	assert((u15&u13) == UInt<4>("0xd"));
	assert((u15|u13) == UInt<4>("0xf"));
	assert((u15^u13) == UInt<4>("0x2"));
	assert((u15.andr()) == UInt<1>("0x1"));
	assert((u15.orr()) == UInt<1>("0x1"));
	assert((u15.xorr()) == UInt<1>("0x0"));
	assert(u15.cat(u13) == UInt<8>("0xfd"));
	assert(u15/u13 == UInt<4>("0x1"));
	assert(u15%u13 == UInt<4>("0x2"));
	assert(u15+u14 == UInt<5>("0x1d"));
	assert(u15-u14 == UInt<5>("0x1"));
	assert(u15*u14 == UInt<8>("0xd2"));
	assert(0 == (u15<u14));
	assert(0 == (u15<=u14));
	assert(1 == (u15>u14));
	assert(1 == (u15>=u14));
	assert(0 == (u15==u14));
	assert(1 == (u15!=u14));
	assert(u15.pad<3>() == UInt<4>("0xf"));
	assert(u15.shl<3>() == UInt<7>("0x78"));
	assert(u15.shr<3>() == UInt<1>("0x1"));
	assert((u15&u14) == UInt<4>("0xe"));
	assert((u15|u14) == UInt<4>("0xf"));
	assert((u15^u14) == UInt<4>("0x1"));
	assert((u15.andr()) == UInt<1>("0x1"));
	assert((u15.orr()) == UInt<1>("0x1"));
	assert((u15.xorr()) == UInt<1>("0x0"));
	assert(u15.cat(u14) == UInt<8>("0xfe"));
	assert(u15/u14 == UInt<4>("0x1"));
	assert(u15%u14 == UInt<4>("0x1"));
	assert(u15+u15 == UInt<5>("0x1e"));
	assert(u15-u15 == UInt<5>("0x0"));
	assert(u15*u15 == UInt<8>("0xe1"));
	assert(0 == (u15<u15));
	assert(1 == (u15<=u15));
	assert(0 == (u15>u15));
	assert(1 == (u15>=u15));
	assert(1 == (u15==u15));
	assert(0 == (u15!=u15));
	assert(u15.pad<3>() == UInt<4>("0xf"));
	assert(u15.shl<3>() == UInt<7>("0x78"));
	assert(u15.shr<3>() == UInt<1>("0x1"));
	assert((u15&u15) == UInt<4>("0xf"));
	assert((u15|u15) == UInt<4>("0xf"));
	assert((u15^u15) == UInt<4>("0x0"));
	assert((u15.andr()) == UInt<1>("0x1"));
	assert((u15.orr()) == UInt<1>("0x1"));
	assert((u15.xorr()) == UInt<1>("0x0"));
	assert(u15.cat(u15) == UInt<8>("0xff"));
	assert(u15/u15 == UInt<4>("0x1"));
	assert(u15%u15 == UInt<4>("0x0"));
	assert((u8 << UInt<3>("0x4")) == UInt<11>("0x80"));
	assert((u8 >> UInt<3>("0x4")) == UInt<4>("0x0"));
	assert(~u8 == UInt<4>("0x7"));
	assert((u9 << UInt<3>("0x4")) == UInt<11>("0x90"));
	assert((u9 >> UInt<3>("0x4")) == UInt<4>("0x0"));
	assert(~u9 == UInt<4>("0x6"));
	assert((u10 << UInt<3>("0x4")) == UInt<11>("0xa0"));
	assert((u10 >> UInt<3>("0x4")) == UInt<4>("0x0"));
	assert(~u10 == UInt<4>("0x5"));
	assert((u11 << UInt<3>("0x4")) == UInt<11>("0xb0"));
	assert((u11 >> UInt<3>("0x4")) == UInt<4>("0x0"));
	assert(~u11 == UInt<4>("0x4"));
	assert((u12 << UInt<3>("0x4")) == UInt<11>("0xc0"));
	assert((u12 >> UInt<3>("0x4")) == UInt<4>("0x0"));
	assert(~u12 == UInt<4>("0x3"));
	assert((u13 << UInt<3>("0x4")) == UInt<11>("0xd0"));
	assert((u13 >> UInt<3>("0x4")) == UInt<4>("0x0"));
	assert(~u13 == UInt<4>("0x2"));
	assert((u14 << UInt<3>("0x4")) == UInt<11>("0xe0"));
	assert((u14 >> UInt<3>("0x4")) == UInt<4>("0x0"));
	assert(~u14 == UInt<4>("0x1"));
	assert((u15 << UInt<3>("0x4")) == UInt<11>("0xf0"));
	assert((u15 >> UInt<3>("0x4")) == UInt<4>("0x0"));
	assert(~u15 == UInt<4>("0x0"));
	assert((u8.bits<3,1>()) == UInt<3>("0x4"));
	assert((u9.bits<3,1>()) == UInt<3>("0x4"));
	assert((u10.bits<3,1>()) == UInt<3>("0x5"));
	assert((u11.bits<3,1>()) == UInt<3>("0x5"));
	assert((u12.bits<3,1>()) == UInt<3>("0x6"));
	assert((u13.bits<3,1>()) == UInt<3>("0x6"));
	assert((u14.bits<3,1>()) == UInt<3>("0x7"));
	assert((u15.bits<3,1>()) == UInt<3>("0x7"));

	return 0;
}