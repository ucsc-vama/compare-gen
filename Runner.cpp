#include "./firrtl-sig/uint.h"
#include <iostream>
#include <assert.h>
#include <stdlib.h>
using namespace std;

int main() {

	UInt<16> u43200("0xa8c0");
	UInt<16> u58516("0xe494");
	UInt<16> u47641("0xba19");
	assert(u43200+u43200 == UInt<17>("0x15180"));
	assert(u43200-u43200 == UInt<17>("0x0"));
	assert(u43200*u43200 == UInt<32>("0x6f3c9000"));
	assert(0 == (u43200<u43200));
	assert(1 == (u43200<=u43200));
	assert(0 == (u43200>u43200));
	assert(1 == (u43200>=u43200));
	assert(1 == (u43200==u43200));
	assert(0 == (u43200!=u43200));
	assert(u43200.pad<43200>() == UInt<43200>("0xa8c0"));
	assert(u43200/u43200 == UInt<16>("0x1"));
	assert(u43200%u43200 == UInt<16>("0x0"));
	assert(u43200+u58516 == UInt<17>("0x18d54"));
	assert(u43200-u58516 == UInt<17>("0x1c42c"));
	assert(u43200*u58516 == UInt<32>("0x96ac8f00"));
	assert(1 == (u43200<u58516));
	assert(1 == (u43200<=u58516));
	assert(0 == (u43200>u58516));
	assert(0 == (u43200>=u58516));
	assert(0 == (u43200==u58516));
	assert(1 == (u43200!=u58516));
	assert(u43200.pad<58516>() == UInt<58516>("0xa8c0"));
	assert(u43200/u58516 == UInt<16>("0x0"));
	assert(u43200%u58516 == UInt<16>("0xa8c0"));
	assert(u43200+u47641 == UInt<17>("0x162d9"));
	assert(u43200-u47641 == UInt<17>("0x1eea7"));
	assert(u43200*u47641 == UInt<32>("0x7aabfac0"));
	assert(1 == (u43200<u47641));
	assert(1 == (u43200<=u47641));
	assert(0 == (u43200>u47641));
	assert(0 == (u43200>=u47641));
	assert(0 == (u43200==u47641));
	assert(1 == (u43200!=u47641));
	assert(u43200.pad<47641>() == UInt<47641>("0xa8c0"));
	assert(u43200/u47641 == UInt<16>("0x0"));
	assert(u43200%u47641 == UInt<16>("0xa8c0"));
	assert(u58516+u43200 == UInt<17>("0x18d54"));
	assert(u58516-u43200 == UInt<17>("0x3bd4"));
	assert(u58516*u43200 == UInt<32>("0x96ac8f00"));
	assert(0 == (u58516<u43200));
	assert(0 == (u58516<=u43200));
	assert(1 == (u58516>u43200));
	assert(1 == (u58516>=u43200));
	assert(0 == (u58516==u43200));
	assert(1 == (u58516!=u43200));
	assert(u58516.pad<43200>() == UInt<43200>("0xe494"));
	assert(u58516/u43200 == UInt<16>("0x1"));
	assert(u58516%u43200 == UInt<16>("0x3bd4"));
	assert(u58516+u58516 == UInt<17>("0x1c928"));
	assert(u58516-u58516 == UInt<17>("0x0"));
	assert(u58516*u58516 == UInt<32>("0xcc17f590"));
	assert(0 == (u58516<u58516));
	assert(1 == (u58516<=u58516));
	assert(0 == (u58516>u58516));
	assert(1 == (u58516>=u58516));
	assert(1 == (u58516==u58516));
	assert(0 == (u58516!=u58516));
	assert(u58516.pad<58516>() == UInt<58516>("0xe494"));
	assert(u58516/u58516 == UInt<16>("0x1"));
	assert(u58516%u58516 == UInt<16>("0x0"));
	assert(u58516+u47641 == UInt<17>("0x19ead"));
	assert(u58516-u47641 == UInt<17>("0x2a7b"));
	assert(u58516*u47641 == UInt<32>("0xa629da74"));
	assert(0 == (u58516<u47641));
	assert(0 == (u58516<=u47641));
	assert(1 == (u58516>u47641));
	assert(1 == (u58516>=u47641));
	assert(0 == (u58516==u47641));
	assert(1 == (u58516!=u47641));
	assert(u58516.pad<47641>() == UInt<47641>("0xe494"));
	assert(u58516/u47641 == UInt<16>("0x1"));
	assert(u58516%u47641 == UInt<16>("0x2a7b"));
	assert(u47641+u43200 == UInt<17>("0x162d9"));
	assert(u47641-u43200 == UInt<17>("0x1159"));
	assert(u47641*u43200 == UInt<32>("0x7aabfac0"));
	assert(0 == (u47641<u43200));
	assert(0 == (u47641<=u43200));
	assert(1 == (u47641>u43200));
	assert(1 == (u47641>=u43200));
	assert(0 == (u47641==u43200));
	assert(1 == (u47641!=u43200));
	assert(u47641.pad<43200>() == UInt<43200>("0xba19"));
	assert(u47641/u43200 == UInt<16>("0x1"));
	assert(u47641%u43200 == UInt<16>("0x1159"));
	assert(u47641+u58516 == UInt<17>("0x19ead"));
	assert(u47641-u58516 == UInt<17>("0x1d585"));
	assert(u47641*u58516 == UInt<32>("0xa629da74"));
	assert(1 == (u47641<u58516));
	assert(1 == (u47641<=u58516));
	assert(0 == (u47641>u58516));
	assert(0 == (u47641>=u58516));
	assert(0 == (u47641==u58516));
	assert(1 == (u47641!=u58516));
	assert(u47641.pad<58516>() == UInt<58516>("0xba19"));
	assert(u47641/u58516 == UInt<16>("0x0"));
	assert(u47641%u58516 == UInt<16>("0xba19"));
	assert(u47641+u47641 == UInt<17>("0x17432"));
	assert(u47641-u47641 == UInt<17>("0x0"));
	assert(u47641*u47641 == UInt<32>("0x87485671"));
	assert(0 == (u47641<u47641));
	assert(1 == (u47641<=u47641));
	assert(0 == (u47641>u47641));
	assert(1 == (u47641>=u47641));
	assert(1 == (u47641==u47641));
	assert(0 == (u47641!=u47641));
	assert(u47641.pad<47641>() == UInt<47641>("0xba19"));
	assert(u47641/u47641 == UInt<16>("0x1"));
	assert(u47641%u47641 == UInt<16>("0x0"));
	UInt<31> u1686992060("0x648d74bc");
	UInt<31> u2053923997("0x7a6c649d");
	UInt<31> u1605993679("0x5fb984cf");
	assert(u1686992060+u1686992060 == UInt<32>("0xc91ae978"));
	assert(u1686992060-u1686992060 == UInt<32>("0x0"));
	assert(u1686992060*u1686992060 == UInt<62>("0x277ed15cac52ea10"));
	assert(0 == (u1686992060<u1686992060));
	assert(1 == (u1686992060<=u1686992060));
	assert(0 == (u1686992060>u1686992060));
	assert(1 == (u1686992060>=u1686992060));
	assert(1 == (u1686992060==u1686992060));
	assert(0 == (u1686992060!=u1686992060));
	assert(u1686992060.pad<1686992060>() == UInt<1686992060>("0x648d74bc"));
	assert(u1686992060/u1686992060 == UInt<31>("0x1"));
	assert(u1686992060%u1686992060 == UInt<31>("0x0"));
	assert(u1686992060+u2053923997 == UInt<32>("0xdef9d959"));
	assert(u1686992060-u2053923997 == UInt<32>("0xea21101f"));
	assert(u1686992060*u2053923997 == UInt<62>("0x3015fcd3c3aa074c"));
	assert(1 == (u1686992060<u2053923997));
	assert(1 == (u1686992060<=u2053923997));
	assert(0 == (u1686992060>u2053923997));
	assert(0 == (u1686992060>=u2053923997));
	assert(0 == (u1686992060==u2053923997));
	assert(1 == (u1686992060!=u2053923997));
	assert(u1686992060.pad<2053923997>() == UInt<2053923997>("0x648d74bc"));
	assert(u1686992060/u2053923997 == UInt<31>("0x0"));
	assert(u1686992060%u2053923997 == UInt<31>("0x648d74bc"));
	assert(u1686992060+u1605993679 == UInt<32>("0xc446f98b"));
	assert(u1686992060-u1605993679 == UInt<32>("0x4d3efed"));
	assert(u1686992060*u1605993679 == UInt<62>("0x25995cb55e6e5404"));
	assert(0 == (u1686992060<u1605993679));
	assert(0 == (u1686992060<=u1605993679));
	assert(1 == (u1686992060>u1605993679));
	assert(1 == (u1686992060>=u1605993679));
	assert(0 == (u1686992060==u1605993679));
	assert(1 == (u1686992060!=u1605993679));
	assert(u1686992060.pad<1605993679>() == UInt<1605993679>("0x648d74bc"));
	assert(u1686992060/u1605993679 == UInt<31>("0x1"));
	assert(u1686992060%u1605993679 == UInt<31>("0x4d3efed"));
	assert(u2053923997+u1686992060 == UInt<32>("0xdef9d959"));
	assert(u2053923997-u1686992060 == UInt<32>("0x15deefe1"));
	assert(u2053923997*u1686992060 == UInt<62>("0x3015fcd3c3aa074c"));
	assert(0 == (u2053923997<u1686992060));
	assert(0 == (u2053923997<=u1686992060));
	assert(1 == (u2053923997>u1686992060));
	assert(1 == (u2053923997>=u1686992060));
	assert(0 == (u2053923997==u1686992060));
	assert(1 == (u2053923997!=u1686992060));
	assert(u2053923997.pad<1686992060>() == UInt<1686992060>("0x7a6c649d"));
	assert(u2053923997/u1686992060 == UInt<31>("0x1"));
	assert(u2053923997%u1686992060 == UInt<31>("0x15deefe1"));
	assert(u2053923997+u2053923997 == UInt<32>("0xf4d8c93a"));
	assert(u2053923997-u2053923997 == UInt<32>("0x0"));
	assert(u2053923997*u2053923997 == UInt<62>("0x3a8b7dcab0030849"));
	assert(0 == (u2053923997<u2053923997));
	assert(1 == (u2053923997<=u2053923997));
	assert(0 == (u2053923997>u2053923997));
	assert(1 == (u2053923997>=u2053923997));
	assert(1 == (u2053923997==u2053923997));
	assert(0 == (u2053923997!=u2053923997));
	assert(u2053923997.pad<2053923997>() == UInt<2053923997>("0x7a6c649d"));
	assert(u2053923997/u2053923997 == UInt<31>("0x1"));
	assert(u2053923997%u2053923997 == UInt<31>("0x0"));
	assert(u2053923997+u1605993679 == UInt<32>("0xda25e96c"));
	assert(u2053923997-u1605993679 == UInt<32>("0x1ab2dfce"));
	assert(u2053923997*u1605993679 == UInt<62>("0x2dc6f12dd9fb4ef3"));
	assert(0 == (u2053923997<u1605993679));
	assert(0 == (u2053923997<=u1605993679));
	assert(1 == (u2053923997>u1605993679));
	assert(1 == (u2053923997>=u1605993679));
	assert(0 == (u2053923997==u1605993679));
	assert(1 == (u2053923997!=u1605993679));
	assert(u2053923997.pad<1605993679>() == UInt<1605993679>("0x7a6c649d"));
	assert(u2053923997/u1605993679 == UInt<31>("0x1"));
	assert(u2053923997%u1605993679 == UInt<31>("0x1ab2dfce"));
	assert(u1605993679+u1686992060 == UInt<32>("0xc446f98b"));
	assert(u1605993679-u1686992060 == UInt<32>("0xfb2c1013"));
	assert(u1605993679*u1686992060 == UInt<62>("0x25995cb55e6e5404"));
	assert(1 == (u1605993679<u1686992060));
	assert(1 == (u1605993679<=u1686992060));
	assert(0 == (u1605993679>u1686992060));
	assert(0 == (u1605993679>=u1686992060));
	assert(0 == (u1605993679==u1686992060));
	assert(1 == (u1605993679!=u1686992060));
	assert(u1605993679.pad<1686992060>() == UInt<1686992060>("0x5fb984cf"));
	assert(u1605993679/u1686992060 == UInt<31>("0x0"));
	assert(u1605993679%u1686992060 == UInt<31>("0x5fb984cf"));
	assert(u1605993679+u2053923997 == UInt<32>("0xda25e96c"));
	assert(u1605993679-u2053923997 == UInt<32>("0xe54d2032"));
	assert(u1605993679*u2053923997 == UInt<62>("0x2dc6f12dd9fb4ef3"));
	assert(1 == (u1605993679<u2053923997));
	assert(1 == (u1605993679<=u2053923997));
	assert(0 == (u1605993679>u2053923997));
	assert(0 == (u1605993679>=u2053923997));
	assert(0 == (u1605993679==u2053923997));
	assert(1 == (u1605993679!=u2053923997));
	assert(u1605993679.pad<2053923997>() == UInt<2053923997>("0x5fb984cf"));
	assert(u1605993679/u2053923997 == UInt<31>("0x0"));
	assert(u1605993679%u2053923997 == UInt<31>("0x5fb984cf"));
	assert(u1605993679+u1605993679 == UInt<32>("0xbf73099e"));
	assert(u1605993679-u1605993679 == UInt<32>("0x0"));
	assert(u1605993679*u1605993679 == UInt<62>("0x23cb3702da141f61"));
	assert(0 == (u1605993679<u1605993679));
	assert(1 == (u1605993679<=u1605993679));
	assert(0 == (u1605993679>u1605993679));
	assert(1 == (u1605993679>=u1605993679));
	assert(1 == (u1605993679==u1605993679));
	assert(0 == (u1605993679!=u1605993679));
	assert(u1605993679.pad<1605993679>() == UInt<1605993679>("0x5fb984cf"));
	assert(u1605993679/u1605993679 == UInt<31>("0x1"));
	assert(u1605993679%u1605993679 == UInt<31>("0x0"));
	UInt<1> u0("0x0");
	UInt<1> u1("0x1");
	assert(0 == (u0<u0));
	assert(1 == (u0<=u0));
	assert(0 == (u0>u0));
	assert(1 == (u0>=u0));
	assert(1 == (u0==u0));
	assert(0 == (u0!=u0));
	assert(1 == (u0<u1));
	assert(1 == (u0<=u1));
	assert(0 == (u0>u1));
	assert(0 == (u0>=u1));
	assert(0 == (u0==u1));
	assert(1 == (u0!=u1));
	assert(0 == (u1<u0));
	assert(0 == (u1<=u0));
	assert(1 == (u1>u0));
	assert(1 == (u1>=u0));
	assert(0 == (u1==u0));
	assert(1 == (u1!=u0));
	assert(0 == (u1<u1));
	assert(1 == (u1<=u1));
	assert(0 == (u1>u1));
	assert(1 == (u1>=u1));
	assert(1 == (u1==u1));
	assert(0 == (u1!=u1));
	UInt<2> u2("0x2");
	UInt<2> u3("0x3");
	assert(0 == (u2<u2));
	assert(1 == (u2<=u2));
	assert(0 == (u2>u2));
	assert(1 == (u2>=u2));
	assert(1 == (u2==u2));
	assert(0 == (u2!=u2));
	assert(1 == (u2<u3));
	assert(1 == (u2<=u3));
	assert(0 == (u2>u3));
	assert(0 == (u2>=u3));
	assert(0 == (u2==u3));
	assert(1 == (u2!=u3));
	assert(0 == (u3<u2));
	assert(0 == (u3<=u2));
	assert(1 == (u3>u2));
	assert(1 == (u3>=u2));
	assert(0 == (u3==u2));
	assert(1 == (u3!=u2));
	assert(0 == (u3<u3));
	assert(1 == (u3<=u3));
	assert(0 == (u3>u3));
	assert(1 == (u3>=u3));
	assert(1 == (u3==u3));
	assert(0 == (u3!=u3));
	UInt<3> u4("0x4");
	UInt<3> u5("0x5");
	UInt<3> u6("0x6");
	UInt<3> u7("0x7");
	UInt<4> u8("0x8");
	UInt<4> u9("0x9");
	UInt<4> u10("0xa");
	UInt<4> u11("0xb");
	UInt<4> u12("0xc");
	UInt<4> u13("0xd");
	UInt<4> u14("0xe");
	UInt<4> u15("0xf");
	assert(0 == (u8<u8));
	assert(1 == (u8<=u8));
	assert(0 == (u8>u8));
	assert(1 == (u8>=u8));
	assert(1 == (u8==u8));
	assert(0 == (u8!=u8));
	assert(1 == (u8<u9));
	assert(1 == (u8<=u9));
	assert(0 == (u8>u9));
	assert(0 == (u8>=u9));
	assert(0 == (u8==u9));
	assert(1 == (u8!=u9));
	assert(1 == (u8<u10));
	assert(1 == (u8<=u10));
	assert(0 == (u8>u10));
	assert(0 == (u8>=u10));
	assert(0 == (u8==u10));
	assert(1 == (u8!=u10));
	assert(1 == (u8<u11));
	assert(1 == (u8<=u11));
	assert(0 == (u8>u11));
	assert(0 == (u8>=u11));
	assert(0 == (u8==u11));
	assert(1 == (u8!=u11));
	assert(1 == (u8<u12));
	assert(1 == (u8<=u12));
	assert(0 == (u8>u12));
	assert(0 == (u8>=u12));
	assert(0 == (u8==u12));
	assert(1 == (u8!=u12));
	assert(1 == (u8<u13));
	assert(1 == (u8<=u13));
	assert(0 == (u8>u13));
	assert(0 == (u8>=u13));
	assert(0 == (u8==u13));
	assert(1 == (u8!=u13));
	assert(1 == (u8<u14));
	assert(1 == (u8<=u14));
	assert(0 == (u8>u14));
	assert(0 == (u8>=u14));
	assert(0 == (u8==u14));
	assert(1 == (u8!=u14));
	assert(1 == (u8<u15));
	assert(1 == (u8<=u15));
	assert(0 == (u8>u15));
	assert(0 == (u8>=u15));
	assert(0 == (u8==u15));
	assert(1 == (u8!=u15));
	assert(0 == (u9<u8));
	assert(0 == (u9<=u8));
	assert(1 == (u9>u8));
	assert(1 == (u9>=u8));
	assert(0 == (u9==u8));
	assert(1 == (u9!=u8));
	assert(0 == (u9<u9));
	assert(1 == (u9<=u9));
	assert(0 == (u9>u9));
	assert(1 == (u9>=u9));
	assert(1 == (u9==u9));
	assert(0 == (u9!=u9));
	assert(1 == (u9<u10));
	assert(1 == (u9<=u10));
	assert(0 == (u9>u10));
	assert(0 == (u9>=u10));
	assert(0 == (u9==u10));
	assert(1 == (u9!=u10));
	assert(1 == (u9<u11));
	assert(1 == (u9<=u11));
	assert(0 == (u9>u11));
	assert(0 == (u9>=u11));
	assert(0 == (u9==u11));
	assert(1 == (u9!=u11));
	assert(1 == (u9<u12));
	assert(1 == (u9<=u12));
	assert(0 == (u9>u12));
	assert(0 == (u9>=u12));
	assert(0 == (u9==u12));
	assert(1 == (u9!=u12));
	assert(1 == (u9<u13));
	assert(1 == (u9<=u13));
	assert(0 == (u9>u13));
	assert(0 == (u9>=u13));
	assert(0 == (u9==u13));
	assert(1 == (u9!=u13));
	assert(1 == (u9<u14));
	assert(1 == (u9<=u14));
	assert(0 == (u9>u14));
	assert(0 == (u9>=u14));
	assert(0 == (u9==u14));
	assert(1 == (u9!=u14));
	assert(1 == (u9<u15));
	assert(1 == (u9<=u15));
	assert(0 == (u9>u15));
	assert(0 == (u9>=u15));
	assert(0 == (u9==u15));
	assert(1 == (u9!=u15));
	assert(0 == (u10<u8));
	assert(0 == (u10<=u8));
	assert(1 == (u10>u8));
	assert(1 == (u10>=u8));
	assert(0 == (u10==u8));
	assert(1 == (u10!=u8));
	assert(0 == (u10<u9));
	assert(0 == (u10<=u9));
	assert(1 == (u10>u9));
	assert(1 == (u10>=u9));
	assert(0 == (u10==u9));
	assert(1 == (u10!=u9));
	assert(0 == (u10<u10));
	assert(1 == (u10<=u10));
	assert(0 == (u10>u10));
	assert(1 == (u10>=u10));
	assert(1 == (u10==u10));
	assert(0 == (u10!=u10));
	assert(1 == (u10<u11));
	assert(1 == (u10<=u11));
	assert(0 == (u10>u11));
	assert(0 == (u10>=u11));
	assert(0 == (u10==u11));
	assert(1 == (u10!=u11));
	assert(1 == (u10<u12));
	assert(1 == (u10<=u12));
	assert(0 == (u10>u12));
	assert(0 == (u10>=u12));
	assert(0 == (u10==u12));
	assert(1 == (u10!=u12));
	assert(1 == (u10<u13));
	assert(1 == (u10<=u13));
	assert(0 == (u10>u13));
	assert(0 == (u10>=u13));
	assert(0 == (u10==u13));
	assert(1 == (u10!=u13));
	assert(1 == (u10<u14));
	assert(1 == (u10<=u14));
	assert(0 == (u10>u14));
	assert(0 == (u10>=u14));
	assert(0 == (u10==u14));
	assert(1 == (u10!=u14));
	assert(1 == (u10<u15));
	assert(1 == (u10<=u15));
	assert(0 == (u10>u15));
	assert(0 == (u10>=u15));
	assert(0 == (u10==u15));
	assert(1 == (u10!=u15));
	assert(0 == (u11<u8));
	assert(0 == (u11<=u8));
	assert(1 == (u11>u8));
	assert(1 == (u11>=u8));
	assert(0 == (u11==u8));
	assert(1 == (u11!=u8));
	assert(0 == (u11<u9));
	assert(0 == (u11<=u9));
	assert(1 == (u11>u9));
	assert(1 == (u11>=u9));
	assert(0 == (u11==u9));
	assert(1 == (u11!=u9));
	assert(0 == (u11<u10));
	assert(0 == (u11<=u10));
	assert(1 == (u11>u10));
	assert(1 == (u11>=u10));
	assert(0 == (u11==u10));
	assert(1 == (u11!=u10));
	assert(0 == (u11<u11));
	assert(1 == (u11<=u11));
	assert(0 == (u11>u11));
	assert(1 == (u11>=u11));
	assert(1 == (u11==u11));
	assert(0 == (u11!=u11));
	assert(1 == (u11<u12));
	assert(1 == (u11<=u12));
	assert(0 == (u11>u12));
	assert(0 == (u11>=u12));
	assert(0 == (u11==u12));
	assert(1 == (u11!=u12));
	assert(1 == (u11<u13));
	assert(1 == (u11<=u13));
	assert(0 == (u11>u13));
	assert(0 == (u11>=u13));
	assert(0 == (u11==u13));
	assert(1 == (u11!=u13));
	assert(1 == (u11<u14));
	assert(1 == (u11<=u14));
	assert(0 == (u11>u14));
	assert(0 == (u11>=u14));
	assert(0 == (u11==u14));
	assert(1 == (u11!=u14));
	assert(1 == (u11<u15));
	assert(1 == (u11<=u15));
	assert(0 == (u11>u15));
	assert(0 == (u11>=u15));
	assert(0 == (u11==u15));
	assert(1 == (u11!=u15));
	assert(0 == (u12<u8));
	assert(0 == (u12<=u8));
	assert(1 == (u12>u8));
	assert(1 == (u12>=u8));
	assert(0 == (u12==u8));
	assert(1 == (u12!=u8));
	assert(0 == (u12<u9));
	assert(0 == (u12<=u9));
	assert(1 == (u12>u9));
	assert(1 == (u12>=u9));
	assert(0 == (u12==u9));
	assert(1 == (u12!=u9));
	assert(0 == (u12<u10));
	assert(0 == (u12<=u10));
	assert(1 == (u12>u10));
	assert(1 == (u12>=u10));
	assert(0 == (u12==u10));
	assert(1 == (u12!=u10));
	assert(0 == (u12<u11));
	assert(0 == (u12<=u11));
	assert(1 == (u12>u11));
	assert(1 == (u12>=u11));
	assert(0 == (u12==u11));
	assert(1 == (u12!=u11));
	assert(0 == (u12<u12));
	assert(1 == (u12<=u12));
	assert(0 == (u12>u12));
	assert(1 == (u12>=u12));
	assert(1 == (u12==u12));
	assert(0 == (u12!=u12));
	assert(1 == (u12<u13));
	assert(1 == (u12<=u13));
	assert(0 == (u12>u13));
	assert(0 == (u12>=u13));
	assert(0 == (u12==u13));
	assert(1 == (u12!=u13));
	assert(1 == (u12<u14));
	assert(1 == (u12<=u14));
	assert(0 == (u12>u14));
	assert(0 == (u12>=u14));
	assert(0 == (u12==u14));
	assert(1 == (u12!=u14));
	assert(1 == (u12<u15));
	assert(1 == (u12<=u15));
	assert(0 == (u12>u15));
	assert(0 == (u12>=u15));
	assert(0 == (u12==u15));
	assert(1 == (u12!=u15));
	assert(0 == (u13<u8));
	assert(0 == (u13<=u8));
	assert(1 == (u13>u8));
	assert(1 == (u13>=u8));
	assert(0 == (u13==u8));
	assert(1 == (u13!=u8));
	assert(0 == (u13<u9));
	assert(0 == (u13<=u9));
	assert(1 == (u13>u9));
	assert(1 == (u13>=u9));
	assert(0 == (u13==u9));
	assert(1 == (u13!=u9));
	assert(0 == (u13<u10));
	assert(0 == (u13<=u10));
	assert(1 == (u13>u10));
	assert(1 == (u13>=u10));
	assert(0 == (u13==u10));
	assert(1 == (u13!=u10));
	assert(0 == (u13<u11));
	assert(0 == (u13<=u11));
	assert(1 == (u13>u11));
	assert(1 == (u13>=u11));
	assert(0 == (u13==u11));
	assert(1 == (u13!=u11));
	assert(0 == (u13<u12));
	assert(0 == (u13<=u12));
	assert(1 == (u13>u12));
	assert(1 == (u13>=u12));
	assert(0 == (u13==u12));
	assert(1 == (u13!=u12));
	assert(0 == (u13<u13));
	assert(1 == (u13<=u13));
	assert(0 == (u13>u13));
	assert(1 == (u13>=u13));
	assert(1 == (u13==u13));
	assert(0 == (u13!=u13));
	assert(1 == (u13<u14));
	assert(1 == (u13<=u14));
	assert(0 == (u13>u14));
	assert(0 == (u13>=u14));
	assert(0 == (u13==u14));
	assert(1 == (u13!=u14));
	assert(1 == (u13<u15));
	assert(1 == (u13<=u15));
	assert(0 == (u13>u15));
	assert(0 == (u13>=u15));
	assert(0 == (u13==u15));
	assert(1 == (u13!=u15));
	assert(0 == (u14<u8));
	assert(0 == (u14<=u8));
	assert(1 == (u14>u8));
	assert(1 == (u14>=u8));
	assert(0 == (u14==u8));
	assert(1 == (u14!=u8));
	assert(0 == (u14<u9));
	assert(0 == (u14<=u9));
	assert(1 == (u14>u9));
	assert(1 == (u14>=u9));
	assert(0 == (u14==u9));
	assert(1 == (u14!=u9));
	assert(0 == (u14<u10));
	assert(0 == (u14<=u10));
	assert(1 == (u14>u10));
	assert(1 == (u14>=u10));
	assert(0 == (u14==u10));
	assert(1 == (u14!=u10));
	assert(0 == (u14<u11));
	assert(0 == (u14<=u11));
	assert(1 == (u14>u11));
	assert(1 == (u14>=u11));
	assert(0 == (u14==u11));
	assert(1 == (u14!=u11));
	assert(0 == (u14<u12));
	assert(0 == (u14<=u12));
	assert(1 == (u14>u12));
	assert(1 == (u14>=u12));
	assert(0 == (u14==u12));
	assert(1 == (u14!=u12));
	assert(0 == (u14<u13));
	assert(0 == (u14<=u13));
	assert(1 == (u14>u13));
	assert(1 == (u14>=u13));
	assert(0 == (u14==u13));
	assert(1 == (u14!=u13));
	assert(0 == (u14<u14));
	assert(1 == (u14<=u14));
	assert(0 == (u14>u14));
	assert(1 == (u14>=u14));
	assert(1 == (u14==u14));
	assert(0 == (u14!=u14));
	assert(1 == (u14<u15));
	assert(1 == (u14<=u15));
	assert(0 == (u14>u15));
	assert(0 == (u14>=u15));
	assert(0 == (u14==u15));
	assert(1 == (u14!=u15));
	assert(0 == (u15<u8));
	assert(0 == (u15<=u8));
	assert(1 == (u15>u8));
	assert(1 == (u15>=u8));
	assert(0 == (u15==u8));
	assert(1 == (u15!=u8));
	assert(0 == (u15<u9));
	assert(0 == (u15<=u9));
	assert(1 == (u15>u9));
	assert(1 == (u15>=u9));
	assert(0 == (u15==u9));
	assert(1 == (u15!=u9));
	assert(0 == (u15<u10));
	assert(0 == (u15<=u10));
	assert(1 == (u15>u10));
	assert(1 == (u15>=u10));
	assert(0 == (u15==u10));
	assert(1 == (u15!=u10));
	assert(0 == (u15<u11));
	assert(0 == (u15<=u11));
	assert(1 == (u15>u11));
	assert(1 == (u15>=u11));
	assert(0 == (u15==u11));
	assert(1 == (u15!=u11));
	assert(0 == (u15<u12));
	assert(0 == (u15<=u12));
	assert(1 == (u15>u12));
	assert(1 == (u15>=u12));
	assert(0 == (u15==u12));
	assert(1 == (u15!=u12));
	assert(0 == (u15<u13));
	assert(0 == (u15<=u13));
	assert(1 == (u15>u13));
	assert(1 == (u15>=u13));
	assert(0 == (u15==u13));
	assert(1 == (u15!=u13));
	assert(0 == (u15<u14));
	assert(0 == (u15<=u14));
	assert(1 == (u15>u14));
	assert(1 == (u15>=u14));
	assert(0 == (u15==u14));
	assert(1 == (u15!=u14));
	assert(0 == (u15<u15));
	assert(1 == (u15<=u15));
	assert(0 == (u15>u15));
	assert(1 == (u15>=u15));
	assert(1 == (u15==u15));
	assert(0 == (u15!=u15));

	return 0;
}